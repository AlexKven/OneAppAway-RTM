#define MCG_WINRT_SUPPORTED
using Mcg.System;
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.WindowsRuntime;


// -----------------------------------------------------------------------------------------------------------
// 
// WARNING: THIS SOURCE FILE IS FOR 64-BIT BUILDS ONLY!
// 
// MCG GENERATED CODE
// 
// This C# source file is generated by MCG and is added into the application at compile time to support interop features.
// 
// It has three primary components:
// 
// 1. Public type definitions with interop implementation used by this application including WinRT & COM data structures and P/Invokes.
// 
// 2. The 'McgInterop' class containing marshaling code that acts as a bridge from managed code to native code.
// 
// 3. The 'McgNative' class containing marshaling code and native type definitions that call into native code and are called by native code.
// 
// -----------------------------------------------------------------------------------------------------------
// 
// warning CS0067: The event 'event' is never used
#pragma warning disable 67
// warning CS0169: The field 'field' is never used
#pragma warning disable 169
// warning CS0649: Field 'field' is never assigned to, and will always have its default value 0
#pragma warning disable 414
// warning CS0414: The private field 'field' is assigned but its value is never used
#pragma warning disable 649
// warning CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// warning CS0108 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable 108
// warning CS0114 'member1' hides inherited member 'member2'.  To make the current method override that implementation, add the override keyword. Otherwise add the new keyword.
#pragma warning disable 114
// warning CS0659 'type' overrides Object.Equals but does not override GetHashCode.
#pragma warning disable 659
// warning CS0465 Introducing a 'Finalize' method can interfere with destructor invocation. Did you intend to declare a destructor?
#pragma warning disable 465
// warning CS0028 'function declaration' has the wrong signature to be an entry point
#pragma warning disable 28
// warning CS0162 Unreachable code Detected
#pragma warning disable 162
// warning CS0628 new protected member declared in sealed class
#pragma warning disable 628

namespace McgInterop
{
	/// <summary>
	/// P/Invoke class for module 'kernel32.dll'
	/// </summary>
	public unsafe static partial class kernel32_dll
	{
		// Signature, GetNativeSystemInfo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] AdDuplex_Common_Core__SYSTEM_INFO__AdDuplex__AdDuplex_Common_Core___SYSTEM_INFO__AdDuplex, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("AdDuplex, Version=10.0.1.5, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime", "AdDuplex.Common.Core.SettingsManager", "GetNativeSystemInfo")]
		public static void GetNativeSystemInfo(ref global::AdDuplex.Common.Core._SYSTEM_INFO__AdDuplex lpSystemInfo)
		{
			// Setup
			global::AdDuplex.Common.Core._SYSTEM_INFO__AdDuplex unsafe_lpSystemInfo;
			// Marshalling
			unsafe_lpSystemInfo = lpSystemInfo;
			// Call to native method
			global::McgInterop.kernel32_dll_PInvokes.GetNativeSystemInfo(&(unsafe_lpSystemInfo));
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			lpSystemInfo = unsafe_lpSystemInfo;
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'sqlite3.dll'
	/// </summary>
	public unsafe static partial class sqlite3_dll
	{
		// Signature, sqlite3_win32_set_directory, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_win32_set_directory")]
		public static int sqlite3_win32_set_directory(
					uint directoryType, 
					string directoryPath)
		{
			// Setup
			ushort* unsafe_directoryPath = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_directoryPath = directoryPath)
			{
				unsafe_directoryPath = (ushort*)pinned_directoryPath;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_win32_set_directory(
									directoryType, 
									unsafe_directoryPath
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_open, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_open")]
		public static int sqlite3_open(
					global::System.IntPtr filename, 
					out global::System.IntPtr db)
		{
			// Setup
			global::System.IntPtr unsafe_db;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_open(
								filename, 
								&(unsafe_db)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			db = unsafe_db;
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_open_v2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_open_v2")]
		public static int sqlite3_open_v2(
					global::System.IntPtr filename, 
					out global::System.IntPtr db, 
					int flags, 
					global::System.IntPtr zVfs)
		{
			// Setup
			global::System.IntPtr unsafe_db;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_open_v2(
								filename, 
								&(unsafe_db), 
								flags, 
								zVfs
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			db = unsafe_db;
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_close_v2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_close_v2")]
		public static int sqlite3_close_v2(global::System.IntPtr db)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_close_v2(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_prepare_v2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_prepare_v2")]
		public static int sqlite3_prepare_v2(
					global::System.IntPtr db, 
					global::System.IntPtr zSql, 
					int nByte, 
					out global::System.IntPtr ppStmpt, 
					global::System.IntPtr pzTail)
		{
			// Setup
			global::System.IntPtr unsafe_ppStmpt;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_prepare_v2(
								db, 
								zSql, 
								nByte, 
								&(unsafe_ppStmpt), 
								pzTail
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ppStmpt = unsafe_ppStmpt;
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_create_function, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_create_function")]
		public static int sqlite3_create_function(
					global::System.IntPtr db, 
					global::System.IntPtr functionName, 
					int nArg, 
					int p, 
					global::System.IntPtr intPtr1, 
					global::System.IntPtr func, 
					global::System.IntPtr intPtr2, 
					global::System.IntPtr intPtr3)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_create_function(
								db, 
								functionName, 
								nArg, 
								p, 
								intPtr1, 
								func, 
								intPtr2, 
								intPtr3
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_create_collation, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_create_collation")]
		public static int sqlite3_create_collation(
					global::System.IntPtr db, 
					global::System.IntPtr collationName, 
					int textRep, 
					global::System.IntPtr app, 
					global::System.IntPtr compare)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_create_collation(
								db, 
								collationName, 
								textRep, 
								app, 
								compare
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_last_insert_rowid, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_last_insert_rowid")]
		public static long sqlite3_last_insert_rowid(global::System.IntPtr db)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_last_insert_rowid(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_errmsg, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_errmsg")]
		public static global::System.IntPtr sqlite3_errmsg(global::System.IntPtr db)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_errmsg(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_int, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_bind_int")]
		public static int sqlite3_bind_int(
					global::System.IntPtr stmHandle, 
					int iParam, 
					int value)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_bind_int(
								stmHandle, 
								iParam, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_int64, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_bind_int64")]
		public static int sqlite3_bind_int64(
					global::System.IntPtr stmHandle, 
					int iParam, 
					long value)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_bind_int64(
								stmHandle, 
								iParam, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_text, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_bind_text")]
		public static int sqlite3_bind_text(
					global::System.IntPtr stmHandle, 
					int iParam, 
					global::System.IntPtr value, 
					int length, 
					global::System.IntPtr destructor)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_bind_text(
								stmHandle, 
								iParam, 
								value, 
								length, 
								destructor
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_double, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_bind_double")]
		public static int sqlite3_bind_double(
					global::System.IntPtr stmHandle, 
					int iParam, 
					double value)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_bind_double(
								stmHandle, 
								iParam, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_blob, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_bind_blob")]
		public static int sqlite3_bind_blob(
					global::System.IntPtr stmHandle, 
					int iParam, 
					byte[] value, 
					int length, 
					global::System.IntPtr destructor)
		{
			// Setup
			byte* unsafe_value;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_value = global::McgInterop.McgCoreHelpers.GetArrayForCompat(value))
			{
				unsafe_value = (byte*)pinned_value;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_bind_blob(
									stmHandle, 
									iParam, 
									unsafe_value, 
									length, 
									destructor
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_null, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_bind_null")]
		public static int sqlite3_bind_null(
					global::System.IntPtr stmHandle, 
					int iParam)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_bind_null(
								stmHandle, 
								iParam
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_parameter_count, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_bind_parameter_count")]
		public static int sqlite3_bind_parameter_count(global::System.IntPtr stmHandle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_bind_parameter_count(stmHandle);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_parameter_name, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_bind_parameter_name")]
		public static global::System.IntPtr sqlite3_bind_parameter_name(
					global::System.IntPtr stmHandle, 
					int iParam)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_bind_parameter_name(
								stmHandle, 
								iParam
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_parameter_index, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_bind_parameter_index")]
		public static int sqlite3_bind_parameter_index(
					global::System.IntPtr stmHandle, 
					global::System.IntPtr paramName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_bind_parameter_index(
								stmHandle, 
								paramName
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_step, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_step")]
		public static int sqlite3_step(global::System.IntPtr stmHandle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_step(stmHandle);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_int, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_column_int")]
		public static int sqlite3_column_int(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_column_int(
								stmHandle, 
								iCol
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_int64, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_column_int64")]
		public static long sqlite3_column_int64(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_column_int64(
								stmHandle, 
								iCol
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_text, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_column_text")]
		public static global::System.IntPtr sqlite3_column_text(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_column_text(
								stmHandle, 
								iCol
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_double, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_column_double")]
		public static double sqlite3_column_double(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_column_double(
								stmHandle, 
								iCol
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_blob, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_column_blob")]
		public static global::System.IntPtr sqlite3_column_blob(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_column_blob(
								stmHandle, 
								iCol
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_type, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_column_type")]
		public static int sqlite3_column_type(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_column_type(
								stmHandle, 
								iCol
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_bytes, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_column_bytes")]
		public static int sqlite3_column_bytes(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_column_bytes(
								stmHandle, 
								iCol
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_count, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_column_count")]
		public static int sqlite3_column_count(global::System.IntPtr stmHandle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_column_count(stmHandle);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_name, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_column_name")]
		public static global::System.IntPtr sqlite3_column_name(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_column_name(
								stmHandle, 
								iCol
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_origin_name, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_column_origin_name")]
		public static global::System.IntPtr sqlite3_column_origin_name(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_column_origin_name(
								stmHandle, 
								iCol
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_table_name, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_column_table_name")]
		public static global::System.IntPtr sqlite3_column_table_name(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_column_table_name(
								stmHandle, 
								iCol
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_database_name, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_column_database_name")]
		public static global::System.IntPtr sqlite3_column_database_name(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_column_database_name(
								stmHandle, 
								iCol
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_data_count, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_data_count")]
		public static int sqlite3_data_count(global::System.IntPtr stmHandle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_data_count(stmHandle);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_reset, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_reset")]
		public static int sqlite3_reset(global::System.IntPtr stmHandle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_reset(stmHandle);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_clear_bindings, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_clear_bindings")]
		public static int sqlite3_clear_bindings(global::System.IntPtr stmHandle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_clear_bindings(stmHandle);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_finalize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_finalize")]
		public static int sqlite3_finalize(global::System.IntPtr stmHandle)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_finalize(stmHandle);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_int, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_value_int")]
		public static int sqlite3_value_int(global::System.IntPtr value)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_value_int(value);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_int64, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_value_int64")]
		public static long sqlite3_value_int64(global::System.IntPtr value)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_value_int64(value);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_text, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_value_text")]
		public static global::System.IntPtr sqlite3_value_text(global::System.IntPtr value)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_value_text(value);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_double, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_value_double")]
		public static double sqlite3_value_double(global::System.IntPtr value)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_value_double(value);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_blob, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_value_blob")]
		public static global::System.IntPtr sqlite3_value_blob(global::System.IntPtr value)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_value_blob(value);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_type, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_value_type")]
		public static int sqlite3_value_type(global::System.IntPtr value)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_value_type(value);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_bytes, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_value_bytes")]
		public static int sqlite3_value_bytes(global::System.IntPtr value)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_value_bytes(value);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_result_int, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_result_int")]
		public static void sqlite3_result_int(
					global::System.IntPtr context, 
					int value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.sqlite3_dll_PInvokes.sqlite3_result_int(
								context, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_result_int64, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_result_int64")]
		public static void sqlite3_result_int64(
					global::System.IntPtr context, 
					long value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.sqlite3_dll_PInvokes.sqlite3_result_int64(
								context, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_result_text, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_result_text")]
		public static void sqlite3_result_text(
					global::System.IntPtr context, 
					global::System.IntPtr value, 
					int length, 
					global::System.IntPtr destructor)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.sqlite3_dll_PInvokes.sqlite3_result_text(
								context, 
								value, 
								length, 
								destructor
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_result_double, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_result_double")]
		public static void sqlite3_result_double(
					global::System.IntPtr context, 
					double value)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.sqlite3_dll_PInvokes.sqlite3_result_double(
								context, 
								value
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_result_blob, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_result_blob")]
		public static void sqlite3_result_blob(
					global::System.IntPtr context, 
					byte[] value, 
					int length, 
					global::System.IntPtr destructor)
		{
			// Setup
			byte* unsafe_value;
			// Marshalling
			fixed (byte* pinned_value = global::McgInterop.McgCoreHelpers.GetArrayForCompat(value))
			{
				unsafe_value = (byte*)pinned_value;
				// Call to native method
				global::McgInterop.sqlite3_dll_PInvokes.sqlite3_result_blob(
									context, 
									unsafe_value, 
									length, 
									destructor
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, sqlite3_result_null, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_result_null")]
		public static void sqlite3_result_null(global::System.IntPtr context)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.sqlite3_dll_PInvokes.sqlite3_result_null(context);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_result_error, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_result_error")]
		public static void sqlite3_result_error(
					global::System.IntPtr context, 
					global::System.IntPtr value, 
					int length)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.sqlite3_dll_PInvokes.sqlite3_result_error(
								context, 
								value, 
								length
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_aggregate_context, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_aggregate_context")]
		public static global::System.IntPtr sqlite3_aggregate_context(
					global::System.IntPtr context, 
					int length)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_aggregate_context(
								context, 
								length
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_changes, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5", "SQLitePCL.SQLite3Provider+NativeMethods", "sqlite3_changes")]
		public static int sqlite3_changes(global::System.IntPtr db)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_dll_PInvokes.sqlite3_changes(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'sqlite3'
	/// </summary>
	public unsafe static partial class sqlite3
	{
		// Signature, sqlite3_close, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_close")]
		public static int sqlite3_close(global::System.IntPtr db)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_close(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_close_v2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_close_v2")]
		public static int sqlite3_close_v2(global::System.IntPtr db)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_close_v2(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_enable_shared_cache, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_enable_shared_cache")]
		public static int sqlite3_enable_shared_cache(int enable)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_enable_shared_cache(enable);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_interrupt, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_interrupt")]
		public static void sqlite3_interrupt(global::System.IntPtr db)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.sqlite3_PInvokes.sqlite3_interrupt(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_finalize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_finalize")]
		public static int sqlite3_finalize(global::System.IntPtr stmt)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_finalize(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_reset, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_reset")]
		public static int sqlite3_reset(global::System.IntPtr stmt)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_reset(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_clear_bindings, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_clear_bindings")]
		public static int sqlite3_clear_bindings(global::System.IntPtr stmt)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_clear_bindings(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_stmt_status, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_stmt_status")]
		public static int sqlite3_stmt_status(
					global::System.IntPtr stm, 
					int op, 
					int resetFlg)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_stmt_status(
								stm, 
								op, 
								resetFlg
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_parameter_name, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_bind_parameter_name")]
		public static global::System.IntPtr sqlite3_bind_parameter_name(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_bind_parameter_name(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_database_name, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_column_database_name")]
		public static global::System.IntPtr sqlite3_column_database_name(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_column_database_name(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_database_name16, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_column_database_name16")]
		public static global::System.IntPtr sqlite3_column_database_name16(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_column_database_name16(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_decltype, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_column_decltype")]
		public static global::System.IntPtr sqlite3_column_decltype(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_column_decltype(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_decltype16, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_column_decltype16")]
		public static global::System.IntPtr sqlite3_column_decltype16(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_column_decltype16(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_name, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_column_name")]
		public static global::System.IntPtr sqlite3_column_name(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_column_name(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_name16, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_column_name16")]
		public static global::System.IntPtr sqlite3_column_name16(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_column_name16(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_origin_name, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_column_origin_name")]
		public static global::System.IntPtr sqlite3_column_origin_name(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_column_origin_name(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_origin_name16, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_column_origin_name16")]
		public static global::System.IntPtr sqlite3_column_origin_name16(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_column_origin_name16(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_table_name, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_column_table_name")]
		public static global::System.IntPtr sqlite3_column_table_name(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_column_table_name(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_table_name16, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_column_table_name16")]
		public static global::System.IntPtr sqlite3_column_table_name16(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_column_table_name16(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_text, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_column_text")]
		public static global::System.IntPtr sqlite3_column_text(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_column_text(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_text16, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_column_text16")]
		public static global::System.IntPtr sqlite3_column_text16(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_column_text16(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_errmsg, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_errmsg")]
		public static global::System.IntPtr sqlite3_errmsg(global::System.IntPtr db)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_errmsg(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_db_readonly, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_db_readonly")]
		public static int sqlite3_db_readonly(
					global::System.IntPtr db, 
					byte[] dbName)
		{
			// Setup
			byte* unsafe_dbName;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_dbName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dbName))
			{
				unsafe_dbName = (byte*)pinned_dbName;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_db_readonly(
									db, 
									unsafe_dbName
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_db_filename, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_db_filename")]
		public static global::System.IntPtr sqlite3_db_filename(
					global::System.IntPtr db, 
					byte[] att)
		{
			// Setup
			byte* unsafe_att;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_att = global::McgInterop.McgCoreHelpers.GetArrayForCompat(att))
			{
				unsafe_att = (byte*)pinned_att;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_db_filename(
									db, 
									unsafe_att
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_prepare, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_prepare")]
		public static int sqlite3_prepare(
					global::System.IntPtr db, 
					global::System.IntPtr pSql, 
					int nBytes, 
					out global::System.IntPtr stmt, 
					out global::System.IntPtr ptrRemain)
		{
			// Setup
			global::System.IntPtr unsafe_stmt;
			global::System.IntPtr unsafe_ptrRemain;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_prepare(
								db, 
								pSql, 
								nBytes, 
								&(unsafe_stmt), 
								&(unsafe_ptrRemain)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ptrRemain = unsafe_ptrRemain;
			stmt = unsafe_stmt;
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_prepare_v2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_prepare_v2")]
		public static int sqlite3_prepare_v2(
					global::System.IntPtr db, 
					byte[] pSql, 
					int nBytes, 
					out global::System.IntPtr stmt, 
					out global::System.IntPtr ptrRemain)
		{
			// Setup
			byte* unsafe_pSql;
			global::System.IntPtr unsafe_stmt;
			global::System.IntPtr unsafe_ptrRemain;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_pSql = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pSql))
			{
				unsafe_pSql = (byte*)pinned_pSql;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_prepare_v2(
									db, 
									unsafe_pSql, 
									nBytes, 
									&(unsafe_stmt), 
									&(unsafe_ptrRemain)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ptrRemain = unsafe_ptrRemain;
				stmt = unsafe_stmt;
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_db_status, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_db_status")]
		public static int sqlite3_db_status(
					global::System.IntPtr db, 
					int op, 
					out int current, 
					out int highest, 
					int resetFlg)
		{
			// Setup
			int unsafe_current;
			int unsafe_highest;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_db_status(
								db, 
								op, 
								&(unsafe_current), 
								&(unsafe_highest), 
								resetFlg
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			highest = unsafe_highest;
			current = unsafe_current;
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_complete, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_complete")]
		public static int sqlite3_complete(byte[] pSql)
		{
			// Setup
			byte* unsafe_pSql;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_pSql = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pSql))
			{
				unsafe_pSql = (byte*)pinned_pSql;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_complete(unsafe_pSql);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_compileoption_used, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_compileoption_used")]
		public static int sqlite3_compileoption_used(byte[] pSql)
		{
			// Setup
			byte* unsafe_pSql;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_pSql = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pSql))
			{
				unsafe_pSql = (byte*)pinned_pSql;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_compileoption_used(unsafe_pSql);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_compileoption_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_compileoption_get")]
		public static global::System.IntPtr sqlite3_compileoption_get(int n)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_compileoption_get(n);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_table_column_metadata, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_table_column_metadata")]
		public static int sqlite3_table_column_metadata(
					global::System.IntPtr db, 
					byte[] dbName, 
					byte[] tblName, 
					byte[] colName, 
					out global::System.IntPtr ptrDataType, 
					out global::System.IntPtr ptrCollSeq, 
					out int notNull, 
					out int primaryKey, 
					out int autoInc)
		{
			// Setup
			byte* unsafe_dbName;
			byte* unsafe_tblName;
			byte* unsafe_colName;
			global::System.IntPtr unsafe_ptrDataType;
			global::System.IntPtr unsafe_ptrCollSeq;
			int unsafe_notNull;
			int unsafe_primaryKey;
			int unsafe_autoInc;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_dbName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dbName))
			{
				unsafe_dbName = (byte*)pinned_dbName;
				fixed (byte* pinned_tblName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(tblName))
				{
					unsafe_tblName = (byte*)pinned_tblName;
					fixed (byte* pinned_colName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(colName))
					{
						unsafe_colName = (byte*)pinned_colName;
						// Call to native method
						unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_table_column_metadata(
											db, 
											unsafe_dbName, 
											unsafe_tblName, 
											unsafe_colName, 
											&(unsafe_ptrDataType), 
											&(unsafe_ptrCollSeq), 
											&(unsafe_notNull), 
											&(unsafe_primaryKey), 
											&(unsafe_autoInc)
										);
						global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
						autoInc = unsafe_autoInc;
						primaryKey = unsafe_primaryKey;
						notNull = unsafe_notNull;
						ptrCollSeq = unsafe_ptrCollSeq;
						ptrDataType = unsafe_ptrDataType;
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_text, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_value_text")]
		public static global::System.IntPtr sqlite3_value_text(global::System.IntPtr p)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_value_text(p);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_text16, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_value_text16")]
		public static global::System.IntPtr sqlite3_value_text16(global::System.IntPtr p)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_value_text16(p);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_enable_load_extension, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_enable_load_extension")]
		public static int sqlite3_enable_load_extension(
					global::System.IntPtr db, 
					int enable)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_enable_load_extension(
								db, 
								enable
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_load_extension, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_load_extension")]
		public static int sqlite3_load_extension(
					global::System.IntPtr db, 
					byte[] fileName, 
					byte[] procName, 
					ref global::System.IntPtr pError)
		{
			// Setup
			byte* unsafe_fileName;
			byte* unsafe_procName;
			global::System.IntPtr unsafe_pError;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_fileName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(fileName))
			{
				unsafe_fileName = (byte*)pinned_fileName;
				fixed (byte* pinned_procName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(procName))
				{
					unsafe_procName = (byte*)pinned_procName;
					unsafe_pError = pError;
					// Call to native method
					unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_load_extension(
										db, 
										unsafe_fileName, 
										unsafe_procName, 
										&(unsafe_pError)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					pError = unsafe_pError;
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_libversion, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_libversion")]
		public static global::System.IntPtr sqlite3_libversion()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_libversion();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_libversion_number, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_libversion_number")]
		public static int sqlite3_libversion_number()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_libversion_number();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_sourceid, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_sourceid")]
		public static global::System.IntPtr sqlite3_sourceid()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_sourceid();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_malloc, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_malloc")]
		public static global::System.IntPtr sqlite3_malloc(int n)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_malloc(n);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_realloc, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_realloc")]
		public static global::System.IntPtr sqlite3_realloc(
					global::System.IntPtr p, 
					int n)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_realloc(
								p, 
								n
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_free, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_free")]
		public static void sqlite3_free(global::System.IntPtr p)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.sqlite3_PInvokes.sqlite3_free(p);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_open, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_open")]
		public static int sqlite3_open(
					byte[] filename, 
					out global::System.IntPtr db)
		{
			// Setup
			byte* unsafe_filename;
			global::System.IntPtr unsafe_db;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_filename = global::McgInterop.McgCoreHelpers.GetArrayForCompat(filename))
			{
				unsafe_filename = (byte*)pinned_filename;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_open(
									unsafe_filename, 
									&(unsafe_db)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				db = unsafe_db;
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_open_v2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_open_v2")]
		public static int sqlite3_open_v2(
					byte[] filename, 
					out global::System.IntPtr db, 
					int flags, 
					byte[] vfs)
		{
			// Setup
			byte* unsafe_filename;
			global::System.IntPtr unsafe_db;
			byte* unsafe_vfs;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_filename = global::McgInterop.McgCoreHelpers.GetArrayForCompat(filename))
			{
				unsafe_filename = (byte*)pinned_filename;
				fixed (byte* pinned_vfs = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vfs))
				{
					unsafe_vfs = (byte*)pinned_vfs;
					// Call to native method
					unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_open_v2(
										unsafe_filename, 
										&(unsafe_db), 
										flags, 
										unsafe_vfs
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
				db = unsafe_db;
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_vfs_find, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_vfs_find")]
		public static global::System.IntPtr sqlite3_vfs_find(byte[] vfs)
		{
			// Setup
			byte* unsafe_vfs;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_vfs = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vfs))
			{
				unsafe_vfs = (byte*)pinned_vfs;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_vfs_find(unsafe_vfs);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_open16, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_open16")]
		public static int sqlite3_open16(
					string fileName, 
					out global::System.IntPtr db)
		{
			// Setup
			ushort* unsafe_fileName = default(ushort*);
			global::System.IntPtr unsafe_db;
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_fileName = fileName)
			{
				unsafe_fileName = (ushort*)pinned_fileName;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_open16(
									unsafe_fileName, 
									&(unsafe_db)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				db = unsafe_db;
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_last_insert_rowid, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_last_insert_rowid")]
		public static long sqlite3_last_insert_rowid(global::System.IntPtr db)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_last_insert_rowid(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_changes, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_changes")]
		public static int sqlite3_changes(global::System.IntPtr db)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_changes(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_total_changes, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_total_changes")]
		public static int sqlite3_total_changes(global::System.IntPtr db)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_total_changes(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_memory_used, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_memory_used")]
		public static long sqlite3_memory_used()
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_memory_used();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_memory_highwater, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_memory_highwater")]
		public static long sqlite3_memory_highwater(int resetFlag)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_memory_highwater(resetFlag);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_status, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_status")]
		public static int sqlite3_status(
					int op, 
					out int current, 
					out int highwater, 
					int resetFlag)
		{
			// Setup
			int unsafe_current;
			int unsafe_highwater;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_status(
								op, 
								&(unsafe_current), 
								&(unsafe_highwater), 
								resetFlag
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			highwater = unsafe_highwater;
			current = unsafe_current;
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_shutdown, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_shutdown")]
		public static int sqlite3_shutdown()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_shutdown();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_busy_timeout, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_busy_timeout")]
		public static int sqlite3_busy_timeout(
					global::System.IntPtr db, 
					int ms)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_busy_timeout(
								db, 
								ms
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_blob, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_bind_blob")]
		public static int sqlite3_bind_blob(
					global::System.IntPtr stmt, 
					int index, 
					byte[] val, 
					int nSize, 
					global::System.IntPtr nTransient)
		{
			// Setup
			byte* unsafe_val;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_val = global::McgInterop.McgCoreHelpers.GetArrayForCompat(val))
			{
				unsafe_val = (byte*)pinned_val;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_bind_blob(
									stmt, 
									index, 
									unsafe_val, 
									nSize, 
									nTransient
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_zeroblob, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_bind_zeroblob")]
		public static int sqlite3_bind_zeroblob(
					global::System.IntPtr stmt, 
					int index, 
					int size)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_bind_zeroblob(
								stmt, 
								index, 
								size
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_double, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_bind_double")]
		public static int sqlite3_bind_double(
					global::System.IntPtr stmt, 
					int index, 
					double val)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_bind_double(
								stmt, 
								index, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_int, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_bind_int")]
		public static int sqlite3_bind_int(
					global::System.IntPtr stmt, 
					int index, 
					int val)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_bind_int(
								stmt, 
								index, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_int64, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_bind_int64")]
		public static int sqlite3_bind_int64(
					global::System.IntPtr stmt, 
					int index, 
					long val)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_bind_int64(
								stmt, 
								index, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_null, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_bind_null")]
		public static int sqlite3_bind_null(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_bind_null(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_text, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_bind_text")]
		public static int sqlite3_bind_text(
					global::System.IntPtr stmt, 
					int index, 
					byte[] val, 
					int nlen, 
					global::System.IntPtr pvReserved)
		{
			// Setup
			byte* unsafe_val;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_val = global::McgInterop.McgCoreHelpers.GetArrayForCompat(val))
			{
				unsafe_val = (byte*)pinned_val;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_bind_text(
									stmt, 
									index, 
									unsafe_val, 
									nlen, 
									pvReserved
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_parameter_count, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_bind_parameter_count")]
		public static int sqlite3_bind_parameter_count(global::System.IntPtr stmt)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_bind_parameter_count(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_parameter_index, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_bind_parameter_index")]
		public static int sqlite3_bind_parameter_index(
					global::System.IntPtr stmt, 
					byte[] strName)
		{
			// Setup
			byte* unsafe_strName;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_strName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(strName))
			{
				unsafe_strName = (byte*)pinned_strName;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_bind_parameter_index(
									stmt, 
									unsafe_strName
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_count, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_column_count")]
		public static int sqlite3_column_count(global::System.IntPtr stmt)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_column_count(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_data_count, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_data_count")]
		public static int sqlite3_data_count(global::System.IntPtr stmt)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_data_count(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_step, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_step")]
		public static int sqlite3_step(global::System.IntPtr stmt)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_step(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_sql, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_sql")]
		public static global::System.IntPtr sqlite3_sql(global::System.IntPtr stmt)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_sql(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_double, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_column_double")]
		public static double sqlite3_column_double(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_column_double(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_int, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_column_int")]
		public static int sqlite3_column_int(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_column_int(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_int64, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_column_int64")]
		public static long sqlite3_column_int64(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_column_int64(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_blob, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_column_blob")]
		public static global::System.IntPtr sqlite3_column_blob(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_column_blob(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_bytes, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_column_bytes")]
		public static int sqlite3_column_bytes(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_column_bytes(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_type, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_column_type")]
		public static int sqlite3_column_type(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_column_type(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_aggregate_count, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_aggregate_count")]
		public static int sqlite3_aggregate_count(global::System.IntPtr context)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_aggregate_count(context);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_blob, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_value_blob")]
		public static global::System.IntPtr sqlite3_value_blob(global::System.IntPtr p)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_value_blob(p);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_bytes, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_value_bytes")]
		public static int sqlite3_value_bytes(global::System.IntPtr p)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_value_bytes(p);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_double, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_value_double")]
		public static double sqlite3_value_double(global::System.IntPtr p)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_value_double(p);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_int, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_value_int")]
		public static int sqlite3_value_int(global::System.IntPtr p)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_value_int(p);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_int64, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_value_int64")]
		public static long sqlite3_value_int64(global::System.IntPtr p)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_value_int64(p);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_type, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_value_type")]
		public static int sqlite3_value_type(global::System.IntPtr p)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_value_type(p);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_user_data, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_user_data")]
		public static global::System.IntPtr sqlite3_user_data(global::System.IntPtr context)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_user_data(context);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_result_blob, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_result_blob")]
		public static void sqlite3_result_blob(
					global::System.IntPtr context, 
					byte[] val, 
					int nSize, 
					global::System.IntPtr pvReserved)
		{
			// Setup
			byte* unsafe_val;
			// Marshalling
			fixed (byte* pinned_val = global::McgInterop.McgCoreHelpers.GetArrayForCompat(val))
			{
				unsafe_val = (byte*)pinned_val;
				// Call to native method
				global::McgInterop.sqlite3_PInvokes.sqlite3_result_blob(
									context, 
									unsafe_val, 
									nSize, 
									pvReserved
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, sqlite3_result_double, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_result_double")]
		public static void sqlite3_result_double(
					global::System.IntPtr context, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.sqlite3_PInvokes.sqlite3_result_double(
								context, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_result_error, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_result_error")]
		public static void sqlite3_result_error(
					global::System.IntPtr context, 
					byte[] strErr, 
					int nLen)
		{
			// Setup
			byte* unsafe_strErr;
			// Marshalling
			fixed (byte* pinned_strErr = global::McgInterop.McgCoreHelpers.GetArrayForCompat(strErr))
			{
				unsafe_strErr = (byte*)pinned_strErr;
				// Call to native method
				global::McgInterop.sqlite3_PInvokes.sqlite3_result_error(
									context, 
									unsafe_strErr, 
									nLen
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, sqlite3_result_int, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_result_int")]
		public static void sqlite3_result_int(
					global::System.IntPtr context, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.sqlite3_PInvokes.sqlite3_result_int(
								context, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_result_int64, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_result_int64")]
		public static void sqlite3_result_int64(
					global::System.IntPtr context, 
					long val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.sqlite3_PInvokes.sqlite3_result_int64(
								context, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_result_null, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_result_null")]
		public static void sqlite3_result_null(global::System.IntPtr context)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.sqlite3_PInvokes.sqlite3_result_null(context);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_result_text, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_result_text")]
		public static void sqlite3_result_text(
					global::System.IntPtr context, 
					byte[] val, 
					int nLen, 
					global::System.IntPtr pvReserved)
		{
			// Setup
			byte* unsafe_val;
			// Marshalling
			fixed (byte* pinned_val = global::McgInterop.McgCoreHelpers.GetArrayForCompat(val))
			{
				unsafe_val = (byte*)pinned_val;
				// Call to native method
				global::McgInterop.sqlite3_PInvokes.sqlite3_result_text(
									context, 
									unsafe_val, 
									nLen, 
									pvReserved
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, sqlite3_result_zeroblob, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_result_zeroblob")]
		public static void sqlite3_result_zeroblob(
					global::System.IntPtr context, 
					int n)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.sqlite3_PInvokes.sqlite3_result_zeroblob(
								context, 
								n
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_result_error_toobig, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_result_error_toobig")]
		public static void sqlite3_result_error_toobig(global::System.IntPtr context)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.sqlite3_PInvokes.sqlite3_result_error_toobig(context);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_result_error_nomem, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_result_error_nomem")]
		public static void sqlite3_result_error_nomem(global::System.IntPtr context)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.sqlite3_PInvokes.sqlite3_result_error_nomem(context);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_result_error_code, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_result_error_code")]
		public static void sqlite3_result_error_code(
					global::System.IntPtr context, 
					int code)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.sqlite3_PInvokes.sqlite3_result_error_code(
								context, 
								code
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_aggregate_context, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_aggregate_context")]
		public static global::System.IntPtr sqlite3_aggregate_context(
					global::System.IntPtr context, 
					int nBytes)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_aggregate_context(
								context, 
								nBytes
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_text16, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_bind_text16")]
		public static int sqlite3_bind_text16(
					global::System.IntPtr stmt, 
					int index, 
					string val, 
					int nlen, 
					global::System.IntPtr pvReserved)
		{
			// Setup
			ushort* unsafe_val = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_val = val)
			{
				unsafe_val = (ushort*)pinned_val;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_bind_text16(
									stmt, 
									index, 
									unsafe_val, 
									nlen, 
									pvReserved
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_result_error16, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_result_error16")]
		public static void sqlite3_result_error16(
					global::System.IntPtr context, 
					string strName, 
					int nLen)
		{
			// Setup
			ushort* unsafe_strName = default(ushort*);
			// Marshalling
			fixed (char* pinned_strName = strName)
			{
				unsafe_strName = (ushort*)pinned_strName;
				// Call to native method
				global::McgInterop.sqlite3_PInvokes.sqlite3_result_error16(
									context, 
									unsafe_strName, 
									nLen
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, sqlite3_result_text16, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_result_text16")]
		public static void sqlite3_result_text16(
					global::System.IntPtr context, 
					string strName, 
					int nLen, 
					global::System.IntPtr pvReserved)
		{
			// Setup
			ushort* unsafe_strName = default(ushort*);
			// Marshalling
			fixed (char* pinned_strName = strName)
			{
				unsafe_strName = (ushort*)pinned_strName;
				// Call to native method
				global::McgInterop.sqlite3_PInvokes.sqlite3_result_text16(
									context, 
									unsafe_strName, 
									nLen, 
									pvReserved
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, sqlite3_config_none, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_config_none")]
		public static int sqlite3_config_none(int op)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_config_none(op);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_config_int, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_config_int")]
		public static int sqlite3_config_int(
					int op, 
					int val)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_config_int(
								op, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_config_log, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_default_NativeMethods_callback_log__SQLitePCL_raw__SQLitePCL__SQLite3Provider_default_NativeMethods_callback_log__SQLitePCL_raw, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_config_log")]
		public static int sqlite3_config_log(
					int op, 
					global::SQLitePCL.SQLite3Provider_default_NativeMethods_callback_log__SQLitePCL_raw func, 
					global::System.IntPtr pvUser)
		{
			// Setup
			void* unsafe_func = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_func = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_default+NativeMethods+callback_log,SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, Pu" +
											"blicKeyToken=null"), 
									func
								);
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_config_log(
									op, 
									unsafe_func, 
									pvUser
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(func);
			}
		}

		// Signature, sqlite3_create_function_v2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_default_NativeMethods_callback_scalar_function__SQLitePCL_raw__SQLitePCL__SQLite3Provider_default_NativeMethods_callback_scalar_function__SQLitePCL_raw, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_default_NativeMethods_callback_agg_function_step__SQLitePCL_raw__SQLitePCL__SQLite3Provider_default_NativeMethods_callback_agg_function_step__SQLitePCL_raw, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_default_NativeMethods_callback_agg_function_final__SQLitePCL_raw__SQLitePCL__SQLite3Provider_default_NativeMethods_callback_agg_function_final__SQLitePCL_raw, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_default_NativeMethods_callback_destroy__SQLitePCL_raw__SQLitePCL__SQLite3Provider_default_NativeMethods_callback_destroy__SQLitePCL_raw, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_create_function_v2")]
		public static int sqlite3_create_function_v2(
					global::System.IntPtr db, 
					byte[] strName, 
					int nArgs, 
					int nType, 
					global::System.IntPtr pvUser, 
					global::SQLitePCL.SQLite3Provider_default_NativeMethods_callback_scalar_function__SQLitePCL_raw func, 
					global::SQLitePCL.SQLite3Provider_default_NativeMethods_callback_agg_function_step__SQLitePCL_raw fstep, 
					global::SQLitePCL.SQLite3Provider_default_NativeMethods_callback_agg_function_final__SQLitePCL_raw ffinal, 
					global::SQLitePCL.SQLite3Provider_default_NativeMethods_callback_destroy__SQLitePCL_raw fdestroy)
		{
			// Setup
			byte* unsafe_strName;
			void* unsafe_func = default(void*);
			void* unsafe_fstep = default(void*);
			void* unsafe_ffinal = default(void*);
			void* unsafe_fdestroy = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_strName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(strName))
				{
					unsafe_strName = (byte*)pinned_strName;
					unsafe_func = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_default+NativeMethods+callback_scalar_function,SQLitePCL.raw, Version=0.9.0.0, Culture" +
												"=neutral, PublicKeyToken=null"), 
										func
									);
					unsafe_fstep = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_default+NativeMethods+callback_agg_function_step,SQLitePCL.raw, Version=0.9.0.0, Cultu" +
												"re=neutral, PublicKeyToken=null"), 
										fstep
									);
					unsafe_ffinal = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_default+NativeMethods+callback_agg_function_final,SQLitePCL.raw, Version=0.9.0.0, Cult" +
												"ure=neutral, PublicKeyToken=null"), 
										ffinal
									);
					unsafe_fdestroy = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_default+NativeMethods+callback_destroy,SQLitePCL.raw, Version=0.9.0.0, Culture=neutral" +
												", PublicKeyToken=null"), 
										fdestroy
									);
					// Call to native method
					unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_create_function_v2(
										db, 
										unsafe_strName, 
										nArgs, 
										nType, 
										pvUser, 
										unsafe_func, 
										unsafe_fstep, 
										unsafe_ffinal, 
										unsafe_fdestroy
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(func);
				global::System.GC.KeepAlive(fstep);
				global::System.GC.KeepAlive(ffinal);
				global::System.GC.KeepAlive(fdestroy);
			}
		}

		// Signature, sqlite3_create_collation, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_default_NativeMethods_callback_collation__SQLitePCL_raw__SQLitePCL__SQLite3Provider_default_NativeMethods_callback_collation__SQLitePCL_raw, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_create_collation")]
		public static int sqlite3_create_collation(
					global::System.IntPtr db, 
					byte[] strName, 
					int nType, 
					global::System.IntPtr pvUser, 
					global::SQLitePCL.SQLite3Provider_default_NativeMethods_callback_collation__SQLitePCL_raw func)
		{
			// Setup
			byte* unsafe_strName;
			void* unsafe_func = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_strName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(strName))
				{
					unsafe_strName = (byte*)pinned_strName;
					unsafe_func = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_default+NativeMethods+callback_collation,SQLitePCL.raw, Version=0.9.0.0, Culture=neutr" +
												"al, PublicKeyToken=null"), 
										func
									);
					// Call to native method
					unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_create_collation(
										db, 
										unsafe_strName, 
										nType, 
										pvUser, 
										unsafe_func
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(func);
			}
		}

		// Signature, sqlite3_update_hook, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_default_NativeMethods_callback_update__SQLitePCL_raw__SQLitePCL__SQLite3Provider_default_NativeMethods_callback_update__SQLitePCL_raw, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_update_hook")]
		public static global::System.IntPtr sqlite3_update_hook(
					global::System.IntPtr db, 
					global::SQLitePCL.SQLite3Provider_default_NativeMethods_callback_update__SQLitePCL_raw func, 
					global::System.IntPtr pvUser)
		{
			// Setup
			void* unsafe_func = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_func = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_default+NativeMethods+callback_update,SQLitePCL.raw, Version=0.9.0.0, Culture=neutral," +
											" PublicKeyToken=null"), 
									func
								);
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_update_hook(
									db, 
									unsafe_func, 
									pvUser
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(func);
			}
		}

		// Signature, sqlite3_commit_hook, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_default_NativeMethods_callback_commit__SQLitePCL_raw__SQLitePCL__SQLite3Provider_default_NativeMethods_callback_commit__SQLitePCL_raw, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_commit_hook")]
		public static global::System.IntPtr sqlite3_commit_hook(
					global::System.IntPtr db, 
					global::SQLitePCL.SQLite3Provider_default_NativeMethods_callback_commit__SQLitePCL_raw func, 
					global::System.IntPtr pvUser)
		{
			// Setup
			void* unsafe_func = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_func = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_default+NativeMethods+callback_commit,SQLitePCL.raw, Version=0.9.0.0, Culture=neutral," +
											" PublicKeyToken=null"), 
									func
								);
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_commit_hook(
									db, 
									unsafe_func, 
									pvUser
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(func);
			}
		}

		// Signature, sqlite3_profile, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_default_NativeMethods_callback_profile__SQLitePCL_raw__SQLitePCL__SQLite3Provider_default_NativeMethods_callback_profile__SQLitePCL_raw, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_profile")]
		public static global::System.IntPtr sqlite3_profile(
					global::System.IntPtr db, 
					global::SQLitePCL.SQLite3Provider_default_NativeMethods_callback_profile__SQLitePCL_raw func, 
					global::System.IntPtr pvUser)
		{
			// Setup
			void* unsafe_func = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_func = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_default+NativeMethods+callback_profile,SQLitePCL.raw, Version=0.9.0.0, Culture=neutral" +
											", PublicKeyToken=null"), 
									func
								);
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_profile(
									db, 
									unsafe_func, 
									pvUser
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(func);
			}
		}

		// Signature, sqlite3_progress_handler, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_default_NativeMethods_callback_progress_handler__SQLitePCL_raw__SQLitePCL__SQLite3Provider_default_NativeMethods_callback_progress_handler__SQLitePCL_raw, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_progress_handler")]
		public static global::System.IntPtr sqlite3_progress_handler(
					global::System.IntPtr db, 
					int instructions, 
					global::SQLitePCL.SQLite3Provider_default_NativeMethods_callback_progress_handler__SQLitePCL_raw func, 
					global::System.IntPtr pvUser)
		{
			// Setup
			void* unsafe_func = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_func = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_default+NativeMethods+callback_progress_handler,SQLitePCL.raw, Version=0.9.0.0, Cultur" +
											"e=neutral, PublicKeyToken=null"), 
									func
								);
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_progress_handler(
									db, 
									instructions, 
									unsafe_func, 
									pvUser
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(func);
			}
		}

		// Signature, sqlite3_trace, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_default_NativeMethods_callback_trace__SQLitePCL_raw__SQLitePCL__SQLite3Provider_default_NativeMethods_callback_trace__SQLitePCL_raw, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_trace")]
		public static global::System.IntPtr sqlite3_trace(
					global::System.IntPtr db, 
					global::SQLitePCL.SQLite3Provider_default_NativeMethods_callback_trace__SQLitePCL_raw func, 
					global::System.IntPtr pvUser)
		{
			// Setup
			void* unsafe_func = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_func = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_default+NativeMethods+callback_trace,SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, " +
											"PublicKeyToken=null"), 
									func
								);
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_trace(
									db, 
									unsafe_func, 
									pvUser
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(func);
			}
		}

		// Signature, sqlite3_rollback_hook, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_default_NativeMethods_callback_rollback__SQLitePCL_raw__SQLitePCL__SQLite3Provider_default_NativeMethods_callback_rollback__SQLitePCL_raw, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_rollback_hook")]
		public static global::System.IntPtr sqlite3_rollback_hook(
					global::System.IntPtr db, 
					global::SQLitePCL.SQLite3Provider_default_NativeMethods_callback_rollback__SQLitePCL_raw func, 
					global::System.IntPtr pvUser)
		{
			// Setup
			void* unsafe_func = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_func = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_default+NativeMethods+callback_rollback,SQLitePCL.raw, Version=0.9.0.0, Culture=neutra" +
											"l, PublicKeyToken=null"), 
									func
								);
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_rollback_hook(
									db, 
									unsafe_func, 
									pvUser
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(func);
			}
		}

		// Signature, sqlite3_db_handle, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_db_handle")]
		public static global::System.IntPtr sqlite3_db_handle(global::System.IntPtr stmt)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_db_handle(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_next_stmt, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_next_stmt")]
		public static global::System.IntPtr sqlite3_next_stmt(
					global::System.IntPtr db, 
					global::System.IntPtr stmt)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_next_stmt(
								db, 
								stmt
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_stmt_busy, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_stmt_busy")]
		public static int sqlite3_stmt_busy(global::System.IntPtr stmt)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_stmt_busy(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_stmt_readonly, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_stmt_readonly")]
		public static int sqlite3_stmt_readonly(global::System.IntPtr stmt)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_stmt_readonly(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_exec, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_default_NativeMethods_callback_exec__SQLitePCL_raw__SQLitePCL__SQLite3Provider_default_NativeMethods_callback_exec__SQLitePCL_raw, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_exec")]
		public static int sqlite3_exec(
					global::System.IntPtr db, 
					byte[] strSql, 
					global::SQLitePCL.SQLite3Provider_default_NativeMethods_callback_exec__SQLitePCL_raw cb, 
					global::System.IntPtr pvParam, 
					out global::System.IntPtr errMsg)
		{
			// Setup
			byte* unsafe_strSql;
			void* unsafe_cb = default(void*);
			global::System.IntPtr unsafe_errMsg;
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_strSql = global::McgInterop.McgCoreHelpers.GetArrayForCompat(strSql))
				{
					unsafe_strSql = (byte*)pinned_strSql;
					unsafe_cb = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_default+NativeMethods+callback_exec,SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, P" +
												"ublicKeyToken=null"), 
										cb
									);
					// Call to native method
					unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_exec(
										db, 
										unsafe_strSql, 
										unsafe_cb, 
										pvParam, 
										&(unsafe_errMsg)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					errMsg = unsafe_errMsg;
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(cb);
			}
		}

		// Signature, sqlite3_get_autocommit, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_get_autocommit")]
		public static int sqlite3_get_autocommit(global::System.IntPtr db)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_get_autocommit(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_extended_result_codes, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_extended_result_codes")]
		public static int sqlite3_extended_result_codes(
					global::System.IntPtr db, 
					int onoff)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_extended_result_codes(
								db, 
								onoff
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_errcode, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_errcode")]
		public static int sqlite3_errcode(global::System.IntPtr db)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_errcode(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_extended_errcode, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_extended_errcode")]
		public static int sqlite3_extended_errcode(global::System.IntPtr db)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_extended_errcode(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_errstr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_errstr")]
		public static global::System.IntPtr sqlite3_errstr(int rc)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_errstr(rc);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_log, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_log")]
		public static void sqlite3_log(
					int iErrCode, 
					byte[] zFormat)
		{
			// Setup
			byte* unsafe_zFormat;
			// Marshalling
			fixed (byte* pinned_zFormat = global::McgInterop.McgCoreHelpers.GetArrayForCompat(zFormat))
			{
				unsafe_zFormat = (byte*)pinned_zFormat;
				// Call to native method
				global::McgInterop.sqlite3_PInvokes.sqlite3_log(
									iErrCode, 
									unsafe_zFormat
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, sqlite3_file_control, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_file_control")]
		public static int sqlite3_file_control(
					global::System.IntPtr db, 
					byte[] zDbName, 
					int op, 
					global::System.IntPtr pArg)
		{
			// Setup
			byte* unsafe_zDbName;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_zDbName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(zDbName))
			{
				unsafe_zDbName = (byte*)pinned_zDbName;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_file_control(
									db, 
									unsafe_zDbName, 
									op, 
									pArg
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_backup_init, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_backup_init")]
		public static global::System.IntPtr sqlite3_backup_init(
					global::System.IntPtr destDb, 
					byte[] zDestName, 
					global::System.IntPtr sourceDb, 
					byte[] zSourceName)
		{
			// Setup
			byte* unsafe_zDestName;
			byte* unsafe_zSourceName;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_zDestName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(zDestName))
			{
				unsafe_zDestName = (byte*)pinned_zDestName;
				fixed (byte* pinned_zSourceName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(zSourceName))
				{
					unsafe_zSourceName = (byte*)pinned_zSourceName;
					// Call to native method
					unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_backup_init(
										destDb, 
										unsafe_zDestName, 
										sourceDb, 
										unsafe_zSourceName
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_backup_step, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_backup_step")]
		public static int sqlite3_backup_step(
					global::System.IntPtr backup, 
					int nPage)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_backup_step(
								backup, 
								nPage
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_backup_finish, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_backup_finish")]
		public static int sqlite3_backup_finish(global::System.IntPtr backup)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_backup_finish(backup);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_backup_remaining, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_backup_remaining")]
		public static int sqlite3_backup_remaining(global::System.IntPtr backup)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_backup_remaining(backup);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_backup_pagecount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_backup_pagecount")]
		public static int sqlite3_backup_pagecount(global::System.IntPtr backup)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_backup_pagecount(backup);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_blob_open, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_blob_open")]
		public static int sqlite3_blob_open(
					global::System.IntPtr db, 
					byte[] sdb, 
					byte[] table, 
					byte[] col, 
					long rowid, 
					int flags, 
					out global::System.IntPtr blob)
		{
			// Setup
			byte* unsafe_sdb;
			byte* unsafe_table;
			byte* unsafe_col;
			global::System.IntPtr unsafe_blob;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_sdb = global::McgInterop.McgCoreHelpers.GetArrayForCompat(sdb))
			{
				unsafe_sdb = (byte*)pinned_sdb;
				fixed (byte* pinned_table = global::McgInterop.McgCoreHelpers.GetArrayForCompat(table))
				{
					unsafe_table = (byte*)pinned_table;
					fixed (byte* pinned_col = global::McgInterop.McgCoreHelpers.GetArrayForCompat(col))
					{
						unsafe_col = (byte*)pinned_col;
						// Call to native method
						unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_blob_open(
											db, 
											unsafe_sdb, 
											unsafe_table, 
											unsafe_col, 
											rowid, 
											flags, 
											&(unsafe_blob)
										);
						global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
						blob = unsafe_blob;
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_blob_write, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_blob_write")]
		public static int sqlite3_blob_write(
					global::System.IntPtr blob, 
					byte[] b, 
					int n, 
					int offset)
		{
			// Setup
			byte* unsafe_b;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_b = global::McgInterop.McgCoreHelpers.GetArrayForCompat(b))
			{
				unsafe_b = (byte*)pinned_b;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_blob_write(
									blob, 
									unsafe_b, 
									n, 
									offset
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_blob_read, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_blob_read")]
		public static int sqlite3_blob_read(
					global::System.IntPtr blob, 
					byte[] b, 
					int n, 
					int offset)
		{
			// Setup
			byte* unsafe_b;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_b = global::McgInterop.McgCoreHelpers.GetArrayForCompat(b))
			{
				unsafe_b = (byte*)pinned_b;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_blob_read(
									blob, 
									unsafe_b, 
									n, 
									offset
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, other_sqlite3_blob_write, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "other_sqlite3_blob_write")]
		public static int other_sqlite3_blob_write(
					global::System.IntPtr blob, 
					global::System.IntPtr b, 
					int n, 
					int offset)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.other_sqlite3_blob_write(
								blob, 
								b, 
								n, 
								offset
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, other_sqlite3_blob_read, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "other_sqlite3_blob_read")]
		public static int other_sqlite3_blob_read(
					global::System.IntPtr blob, 
					global::System.IntPtr b, 
					int n, 
					int offset)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.other_sqlite3_blob_read(
								blob, 
								b, 
								n, 
								offset
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_blob_bytes, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_blob_bytes")]
		public static int sqlite3_blob_bytes(global::System.IntPtr blob)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_blob_bytes(blob);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_blob_close, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_blob_close")]
		public static int sqlite3_blob_close(global::System.IntPtr blob)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_blob_close(blob);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_wal_autocheckpoint, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_wal_autocheckpoint")]
		public static int sqlite3_wal_autocheckpoint(
					global::System.IntPtr db, 
					int n)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_wal_autocheckpoint(
								db, 
								n
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_wal_checkpoint, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_wal_checkpoint")]
		public static int sqlite3_wal_checkpoint(
					global::System.IntPtr db, 
					byte[] dbName)
		{
			// Setup
			byte* unsafe_dbName;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_dbName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dbName))
			{
				unsafe_dbName = (byte*)pinned_dbName;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_wal_checkpoint(
									db, 
									unsafe_dbName
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_wal_checkpoint_v2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_wal_checkpoint_v2")]
		public static int sqlite3_wal_checkpoint_v2(
					global::System.IntPtr db, 
					byte[] dbName, 
					int eMode, 
					out int logSize, 
					out int framesCheckPointed)
		{
			// Setup
			byte* unsafe_dbName;
			int unsafe_logSize;
			int unsafe_framesCheckPointed;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_dbName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dbName))
			{
				unsafe_dbName = (byte*)pinned_dbName;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_wal_checkpoint_v2(
									db, 
									unsafe_dbName, 
									eMode, 
									&(unsafe_logSize), 
									&(unsafe_framesCheckPointed)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				framesCheckPointed = unsafe_framesCheckPointed;
				logSize = unsafe_logSize;
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_set_authorizer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_default_NativeMethods_callback_authorizer__SQLitePCL_raw__SQLitePCL__SQLite3Provider_default_NativeMethods_callback_authorizer__SQLitePCL_raw, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_set_authorizer")]
		public static int sqlite3_set_authorizer(
					global::System.IntPtr db, 
					global::SQLitePCL.SQLite3Provider_default_NativeMethods_callback_authorizer__SQLitePCL_raw cb, 
					global::System.IntPtr pvUser)
		{
			// Setup
			void* unsafe_cb = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_cb = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_default+NativeMethods+callback_authorizer,SQLitePCL.raw, Version=0.9.0.0, Culture=neut" +
											"ral, PublicKeyToken=null"), 
									cb
								);
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_set_authorizer(
									db, 
									unsafe_cb, 
									pvUser
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(cb);
			}
		}

		// Signature, sqlite3_win32_set_directory, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_default+NativeMethods", "sqlite3_win32_set_directory")]
		public static int sqlite3_win32_set_directory(
					uint directoryType, 
					string directoryPath)
		{
			// Setup
			ushort* unsafe_directoryPath = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_directoryPath = directoryPath)
			{
				unsafe_directoryPath = (ushort*)pinned_directoryPath;
				// Call to native method
				unsafe___value = global::McgInterop.sqlite3_PInvokes.sqlite3_win32_set_directory(
									directoryType, 
									unsafe_directoryPath
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'esqlite3'
	/// </summary>
	public unsafe static partial class esqlite3
	{
		// Signature, sqlite3_close, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_close")]
		public static int sqlite3_close(global::System.IntPtr db)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_close(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_close_v2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_close_v2")]
		public static int sqlite3_close_v2(global::System.IntPtr db)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_close_v2(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_enable_shared_cache, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_enable_shared_cache")]
		public static int sqlite3_enable_shared_cache(int enable)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_enable_shared_cache(enable);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_interrupt, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_interrupt")]
		public static void sqlite3_interrupt(global::System.IntPtr db)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.esqlite3_PInvokes.sqlite3_interrupt(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_finalize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_finalize")]
		public static int sqlite3_finalize(global::System.IntPtr stmt)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_finalize(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_reset, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_reset")]
		public static int sqlite3_reset(global::System.IntPtr stmt)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_reset(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_clear_bindings, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_clear_bindings")]
		public static int sqlite3_clear_bindings(global::System.IntPtr stmt)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_clear_bindings(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_stmt_status, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_stmt_status")]
		public static int sqlite3_stmt_status(
					global::System.IntPtr stm, 
					int op, 
					int resetFlg)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_stmt_status(
								stm, 
								op, 
								resetFlg
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_parameter_name, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_bind_parameter_name")]
		public static global::System.IntPtr sqlite3_bind_parameter_name(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_bind_parameter_name(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_database_name, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_column_database_name")]
		public static global::System.IntPtr sqlite3_column_database_name(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_column_database_name(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_database_name16, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_column_database_name16")]
		public static global::System.IntPtr sqlite3_column_database_name16(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_column_database_name16(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_decltype, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_column_decltype")]
		public static global::System.IntPtr sqlite3_column_decltype(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_column_decltype(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_decltype16, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_column_decltype16")]
		public static global::System.IntPtr sqlite3_column_decltype16(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_column_decltype16(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_name, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_column_name")]
		public static global::System.IntPtr sqlite3_column_name(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_column_name(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_name16, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_column_name16")]
		public static global::System.IntPtr sqlite3_column_name16(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_column_name16(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_origin_name, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_column_origin_name")]
		public static global::System.IntPtr sqlite3_column_origin_name(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_column_origin_name(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_origin_name16, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_column_origin_name16")]
		public static global::System.IntPtr sqlite3_column_origin_name16(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_column_origin_name16(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_table_name, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_column_table_name")]
		public static global::System.IntPtr sqlite3_column_table_name(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_column_table_name(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_table_name16, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_column_table_name16")]
		public static global::System.IntPtr sqlite3_column_table_name16(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_column_table_name16(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_text, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_column_text")]
		public static global::System.IntPtr sqlite3_column_text(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_column_text(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_text16, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_column_text16")]
		public static global::System.IntPtr sqlite3_column_text16(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_column_text16(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_errmsg, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_errmsg")]
		public static global::System.IntPtr sqlite3_errmsg(global::System.IntPtr db)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_errmsg(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_db_readonly, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_db_readonly")]
		public static int sqlite3_db_readonly(
					global::System.IntPtr db, 
					byte[] dbName)
		{
			// Setup
			byte* unsafe_dbName;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_dbName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dbName))
			{
				unsafe_dbName = (byte*)pinned_dbName;
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_db_readonly(
									db, 
									unsafe_dbName
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_db_filename, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_db_filename")]
		public static global::System.IntPtr sqlite3_db_filename(
					global::System.IntPtr db, 
					byte[] att)
		{
			// Setup
			byte* unsafe_att;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_att = global::McgInterop.McgCoreHelpers.GetArrayForCompat(att))
			{
				unsafe_att = (byte*)pinned_att;
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_db_filename(
									db, 
									unsafe_att
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_prepare, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_prepare")]
		public static int sqlite3_prepare(
					global::System.IntPtr db, 
					global::System.IntPtr pSql, 
					int nBytes, 
					out global::System.IntPtr stmt, 
					out global::System.IntPtr ptrRemain)
		{
			// Setup
			global::System.IntPtr unsafe_stmt;
			global::System.IntPtr unsafe_ptrRemain;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_prepare(
								db, 
								pSql, 
								nBytes, 
								&(unsafe_stmt), 
								&(unsafe_ptrRemain)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ptrRemain = unsafe_ptrRemain;
			stmt = unsafe_stmt;
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_prepare_v2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_prepare_v2")]
		public static int sqlite3_prepare_v2(
					global::System.IntPtr db, 
					byte[] pSql, 
					int nBytes, 
					out global::System.IntPtr stmt, 
					out global::System.IntPtr ptrRemain)
		{
			// Setup
			byte* unsafe_pSql;
			global::System.IntPtr unsafe_stmt;
			global::System.IntPtr unsafe_ptrRemain;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_pSql = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pSql))
			{
				unsafe_pSql = (byte*)pinned_pSql;
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_prepare_v2(
									db, 
									unsafe_pSql, 
									nBytes, 
									&(unsafe_stmt), 
									&(unsafe_ptrRemain)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				ptrRemain = unsafe_ptrRemain;
				stmt = unsafe_stmt;
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_db_status, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_db_status")]
		public static int sqlite3_db_status(
					global::System.IntPtr db, 
					int op, 
					out int current, 
					out int highest, 
					int resetFlg)
		{
			// Setup
			int unsafe_current;
			int unsafe_highest;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_db_status(
								db, 
								op, 
								&(unsafe_current), 
								&(unsafe_highest), 
								resetFlg
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			highest = unsafe_highest;
			current = unsafe_current;
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_complete, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_complete")]
		public static int sqlite3_complete(byte[] pSql)
		{
			// Setup
			byte* unsafe_pSql;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_pSql = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pSql))
			{
				unsafe_pSql = (byte*)pinned_pSql;
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_complete(unsafe_pSql);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_compileoption_used, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_compileoption_used")]
		public static int sqlite3_compileoption_used(byte[] pSql)
		{
			// Setup
			byte* unsafe_pSql;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_pSql = global::McgInterop.McgCoreHelpers.GetArrayForCompat(pSql))
			{
				unsafe_pSql = (byte*)pinned_pSql;
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_compileoption_used(unsafe_pSql);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_compileoption_get, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_compileoption_get")]
		public static global::System.IntPtr sqlite3_compileoption_get(int n)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_compileoption_get(n);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_table_column_metadata, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_table_column_metadata")]
		public static int sqlite3_table_column_metadata(
					global::System.IntPtr db, 
					byte[] dbName, 
					byte[] tblName, 
					byte[] colName, 
					out global::System.IntPtr ptrDataType, 
					out global::System.IntPtr ptrCollSeq, 
					out int notNull, 
					out int primaryKey, 
					out int autoInc)
		{
			// Setup
			byte* unsafe_dbName;
			byte* unsafe_tblName;
			byte* unsafe_colName;
			global::System.IntPtr unsafe_ptrDataType;
			global::System.IntPtr unsafe_ptrCollSeq;
			int unsafe_notNull;
			int unsafe_primaryKey;
			int unsafe_autoInc;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_dbName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dbName))
			{
				unsafe_dbName = (byte*)pinned_dbName;
				fixed (byte* pinned_tblName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(tblName))
				{
					unsafe_tblName = (byte*)pinned_tblName;
					fixed (byte* pinned_colName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(colName))
					{
						unsafe_colName = (byte*)pinned_colName;
						// Call to native method
						unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_table_column_metadata(
											db, 
											unsafe_dbName, 
											unsafe_tblName, 
											unsafe_colName, 
											&(unsafe_ptrDataType), 
											&(unsafe_ptrCollSeq), 
											&(unsafe_notNull), 
											&(unsafe_primaryKey), 
											&(unsafe_autoInc)
										);
						global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
						autoInc = unsafe_autoInc;
						primaryKey = unsafe_primaryKey;
						notNull = unsafe_notNull;
						ptrCollSeq = unsafe_ptrCollSeq;
						ptrDataType = unsafe_ptrDataType;
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_text, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_value_text")]
		public static global::System.IntPtr sqlite3_value_text(global::System.IntPtr p)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_value_text(p);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_text16, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_value_text16")]
		public static global::System.IntPtr sqlite3_value_text16(global::System.IntPtr p)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_value_text16(p);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_enable_load_extension, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_enable_load_extension")]
		public static int sqlite3_enable_load_extension(
					global::System.IntPtr db, 
					int enable)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_enable_load_extension(
								db, 
								enable
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_load_extension, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_load_extension")]
		public static int sqlite3_load_extension(
					global::System.IntPtr db, 
					byte[] fileName, 
					byte[] procName, 
					ref global::System.IntPtr pError)
		{
			// Setup
			byte* unsafe_fileName;
			byte* unsafe_procName;
			global::System.IntPtr unsafe_pError;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_fileName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(fileName))
			{
				unsafe_fileName = (byte*)pinned_fileName;
				fixed (byte* pinned_procName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(procName))
				{
					unsafe_procName = (byte*)pinned_procName;
					unsafe_pError = pError;
					// Call to native method
					unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_load_extension(
										db, 
										unsafe_fileName, 
										unsafe_procName, 
										&(unsafe_pError)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					pError = unsafe_pError;
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_libversion, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_libversion")]
		public static global::System.IntPtr sqlite3_libversion()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_libversion();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_libversion_number, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_libversion_number")]
		public static int sqlite3_libversion_number()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_libversion_number();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_sourceid, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_sourceid")]
		public static global::System.IntPtr sqlite3_sourceid()
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_sourceid();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_malloc, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_malloc")]
		public static global::System.IntPtr sqlite3_malloc(int n)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_malloc(n);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_realloc, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_realloc")]
		public static global::System.IntPtr sqlite3_realloc(
					global::System.IntPtr p, 
					int n)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_realloc(
								p, 
								n
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_free, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_free")]
		public static void sqlite3_free(global::System.IntPtr p)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.esqlite3_PInvokes.sqlite3_free(p);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_open, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_open")]
		public static int sqlite3_open(
					byte[] filename, 
					out global::System.IntPtr db)
		{
			// Setup
			byte* unsafe_filename;
			global::System.IntPtr unsafe_db;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_filename = global::McgInterop.McgCoreHelpers.GetArrayForCompat(filename))
			{
				unsafe_filename = (byte*)pinned_filename;
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_open(
									unsafe_filename, 
									&(unsafe_db)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				db = unsafe_db;
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_open_v2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_open_v2")]
		public static int sqlite3_open_v2(
					byte[] filename, 
					out global::System.IntPtr db, 
					int flags, 
					byte[] vfs)
		{
			// Setup
			byte* unsafe_filename;
			global::System.IntPtr unsafe_db;
			byte* unsafe_vfs;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_filename = global::McgInterop.McgCoreHelpers.GetArrayForCompat(filename))
			{
				unsafe_filename = (byte*)pinned_filename;
				fixed (byte* pinned_vfs = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vfs))
				{
					unsafe_vfs = (byte*)pinned_vfs;
					// Call to native method
					unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_open_v2(
										unsafe_filename, 
										&(unsafe_db), 
										flags, 
										unsafe_vfs
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
				db = unsafe_db;
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_vfs_find, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_vfs_find")]
		public static global::System.IntPtr sqlite3_vfs_find(byte[] vfs)
		{
			// Setup
			byte* unsafe_vfs;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_vfs = global::McgInterop.McgCoreHelpers.GetArrayForCompat(vfs))
			{
				unsafe_vfs = (byte*)pinned_vfs;
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_vfs_find(unsafe_vfs);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_open16, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_open16")]
		public static int sqlite3_open16(
					string fileName, 
					out global::System.IntPtr db)
		{
			// Setup
			ushort* unsafe_fileName = default(ushort*);
			global::System.IntPtr unsafe_db;
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_fileName = fileName)
			{
				unsafe_fileName = (ushort*)pinned_fileName;
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_open16(
									unsafe_fileName, 
									&(unsafe_db)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				db = unsafe_db;
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_last_insert_rowid, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_last_insert_rowid")]
		public static long sqlite3_last_insert_rowid(global::System.IntPtr db)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_last_insert_rowid(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_changes, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_changes")]
		public static int sqlite3_changes(global::System.IntPtr db)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_changes(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_total_changes, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_total_changes")]
		public static int sqlite3_total_changes(global::System.IntPtr db)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_total_changes(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_memory_used, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_memory_used")]
		public static long sqlite3_memory_used()
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_memory_used();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_memory_highwater, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_memory_highwater")]
		public static long sqlite3_memory_highwater(int resetFlag)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_memory_highwater(resetFlag);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_status, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_status")]
		public static int sqlite3_status(
					int op, 
					out int current, 
					out int highwater, 
					int resetFlag)
		{
			// Setup
			int unsafe_current;
			int unsafe_highwater;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_status(
								op, 
								&(unsafe_current), 
								&(unsafe_highwater), 
								resetFlag
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			highwater = unsafe_highwater;
			current = unsafe_current;
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_shutdown, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_shutdown")]
		public static int sqlite3_shutdown()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_shutdown();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_busy_timeout, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_busy_timeout")]
		public static int sqlite3_busy_timeout(
					global::System.IntPtr db, 
					int ms)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_busy_timeout(
								db, 
								ms
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_blob, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_bind_blob")]
		public static int sqlite3_bind_blob(
					global::System.IntPtr stmt, 
					int index, 
					byte[] val, 
					int nSize, 
					global::System.IntPtr nTransient)
		{
			// Setup
			byte* unsafe_val;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_val = global::McgInterop.McgCoreHelpers.GetArrayForCompat(val))
			{
				unsafe_val = (byte*)pinned_val;
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_bind_blob(
									stmt, 
									index, 
									unsafe_val, 
									nSize, 
									nTransient
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_zeroblob, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_bind_zeroblob")]
		public static int sqlite3_bind_zeroblob(
					global::System.IntPtr stmt, 
					int index, 
					int size)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_bind_zeroblob(
								stmt, 
								index, 
								size
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_double, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_bind_double")]
		public static int sqlite3_bind_double(
					global::System.IntPtr stmt, 
					int index, 
					double val)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_bind_double(
								stmt, 
								index, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_int, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_bind_int")]
		public static int sqlite3_bind_int(
					global::System.IntPtr stmt, 
					int index, 
					int val)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_bind_int(
								stmt, 
								index, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_int64, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_bind_int64")]
		public static int sqlite3_bind_int64(
					global::System.IntPtr stmt, 
					int index, 
					long val)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_bind_int64(
								stmt, 
								index, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_null, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_bind_null")]
		public static int sqlite3_bind_null(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_bind_null(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_text, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_bind_text")]
		public static int sqlite3_bind_text(
					global::System.IntPtr stmt, 
					int index, 
					byte[] val, 
					int nlen, 
					global::System.IntPtr pvReserved)
		{
			// Setup
			byte* unsafe_val;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_val = global::McgInterop.McgCoreHelpers.GetArrayForCompat(val))
			{
				unsafe_val = (byte*)pinned_val;
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_bind_text(
									stmt, 
									index, 
									unsafe_val, 
									nlen, 
									pvReserved
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_parameter_count, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_bind_parameter_count")]
		public static int sqlite3_bind_parameter_count(global::System.IntPtr stmt)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_bind_parameter_count(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_parameter_index, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_bind_parameter_index")]
		public static int sqlite3_bind_parameter_index(
					global::System.IntPtr stmt, 
					byte[] strName)
		{
			// Setup
			byte* unsafe_strName;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_strName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(strName))
			{
				unsafe_strName = (byte*)pinned_strName;
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_bind_parameter_index(
									stmt, 
									unsafe_strName
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_count, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_column_count")]
		public static int sqlite3_column_count(global::System.IntPtr stmt)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_column_count(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_data_count, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_data_count")]
		public static int sqlite3_data_count(global::System.IntPtr stmt)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_data_count(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_step, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_step")]
		public static int sqlite3_step(global::System.IntPtr stmt)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_step(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_sql, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_sql")]
		public static global::System.IntPtr sqlite3_sql(global::System.IntPtr stmt)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_sql(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_double, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_column_double")]
		public static double sqlite3_column_double(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_column_double(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_int, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_column_int")]
		public static int sqlite3_column_int(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_column_int(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_int64, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_column_int64")]
		public static long sqlite3_column_int64(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_column_int64(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_blob, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_column_blob")]
		public static global::System.IntPtr sqlite3_column_blob(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_column_blob(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_bytes, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_column_bytes")]
		public static int sqlite3_column_bytes(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_column_bytes(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_column_type, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_column_type")]
		public static int sqlite3_column_type(
					global::System.IntPtr stmt, 
					int index)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_column_type(
								stmt, 
								index
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_aggregate_count, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_aggregate_count")]
		public static int sqlite3_aggregate_count(global::System.IntPtr context)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_aggregate_count(context);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_blob, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_value_blob")]
		public static global::System.IntPtr sqlite3_value_blob(global::System.IntPtr p)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_value_blob(p);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_bytes, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_value_bytes")]
		public static int sqlite3_value_bytes(global::System.IntPtr p)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_value_bytes(p);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_double, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_value_double")]
		public static double sqlite3_value_double(global::System.IntPtr p)
		{
			// Setup
			double unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_value_double(p);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_int, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_value_int")]
		public static int sqlite3_value_int(global::System.IntPtr p)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_value_int(p);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_int64, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_value_int64")]
		public static long sqlite3_value_int64(global::System.IntPtr p)
		{
			// Setup
			long unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_value_int64(p);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_value_type, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_value_type")]
		public static int sqlite3_value_type(global::System.IntPtr p)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_value_type(p);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_user_data, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_user_data")]
		public static global::System.IntPtr sqlite3_user_data(global::System.IntPtr context)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_user_data(context);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_result_blob, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_result_blob")]
		public static void sqlite3_result_blob(
					global::System.IntPtr context, 
					byte[] val, 
					int nSize, 
					global::System.IntPtr pvReserved)
		{
			// Setup
			byte* unsafe_val;
			// Marshalling
			fixed (byte* pinned_val = global::McgInterop.McgCoreHelpers.GetArrayForCompat(val))
			{
				unsafe_val = (byte*)pinned_val;
				// Call to native method
				global::McgInterop.esqlite3_PInvokes.sqlite3_result_blob(
									context, 
									unsafe_val, 
									nSize, 
									pvReserved
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, sqlite3_result_double, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_result_double")]
		public static void sqlite3_result_double(
					global::System.IntPtr context, 
					double val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.esqlite3_PInvokes.sqlite3_result_double(
								context, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_result_error, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_result_error")]
		public static void sqlite3_result_error(
					global::System.IntPtr context, 
					byte[] strErr, 
					int nLen)
		{
			// Setup
			byte* unsafe_strErr;
			// Marshalling
			fixed (byte* pinned_strErr = global::McgInterop.McgCoreHelpers.GetArrayForCompat(strErr))
			{
				unsafe_strErr = (byte*)pinned_strErr;
				// Call to native method
				global::McgInterop.esqlite3_PInvokes.sqlite3_result_error(
									context, 
									unsafe_strErr, 
									nLen
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, sqlite3_result_int, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_result_int")]
		public static void sqlite3_result_int(
					global::System.IntPtr context, 
					int val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.esqlite3_PInvokes.sqlite3_result_int(
								context, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_result_int64, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_result_int64")]
		public static void sqlite3_result_int64(
					global::System.IntPtr context, 
					long val)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.esqlite3_PInvokes.sqlite3_result_int64(
								context, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_result_null, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_result_null")]
		public static void sqlite3_result_null(global::System.IntPtr context)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.esqlite3_PInvokes.sqlite3_result_null(context);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_result_text, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_result_text")]
		public static void sqlite3_result_text(
					global::System.IntPtr context, 
					byte[] val, 
					int nLen, 
					global::System.IntPtr pvReserved)
		{
			// Setup
			byte* unsafe_val;
			// Marshalling
			fixed (byte* pinned_val = global::McgInterop.McgCoreHelpers.GetArrayForCompat(val))
			{
				unsafe_val = (byte*)pinned_val;
				// Call to native method
				global::McgInterop.esqlite3_PInvokes.sqlite3_result_text(
									context, 
									unsafe_val, 
									nLen, 
									pvReserved
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, sqlite3_result_zeroblob, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_result_zeroblob")]
		public static void sqlite3_result_zeroblob(
					global::System.IntPtr context, 
					int n)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.esqlite3_PInvokes.sqlite3_result_zeroblob(
								context, 
								n
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_result_error_toobig, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_result_error_toobig")]
		public static void sqlite3_result_error_toobig(global::System.IntPtr context)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.esqlite3_PInvokes.sqlite3_result_error_toobig(context);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_result_error_nomem, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_result_error_nomem")]
		public static void sqlite3_result_error_nomem(global::System.IntPtr context)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.esqlite3_PInvokes.sqlite3_result_error_nomem(context);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_result_error_code, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_result_error_code")]
		public static void sqlite3_result_error_code(
					global::System.IntPtr context, 
					int code)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.esqlite3_PInvokes.sqlite3_result_error_code(
								context, 
								code
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, sqlite3_aggregate_context, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_aggregate_context")]
		public static global::System.IntPtr sqlite3_aggregate_context(
					global::System.IntPtr context, 
					int nBytes)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_aggregate_context(
								context, 
								nBytes
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_bind_text16, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_bind_text16")]
		public static int sqlite3_bind_text16(
					global::System.IntPtr stmt, 
					int index, 
					string val, 
					int nlen, 
					global::System.IntPtr pvReserved)
		{
			// Setup
			ushort* unsafe_val = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_val = val)
			{
				unsafe_val = (ushort*)pinned_val;
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_bind_text16(
									stmt, 
									index, 
									unsafe_val, 
									nlen, 
									pvReserved
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_result_error16, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_result_error16")]
		public static void sqlite3_result_error16(
					global::System.IntPtr context, 
					string strName, 
					int nLen)
		{
			// Setup
			ushort* unsafe_strName = default(ushort*);
			// Marshalling
			fixed (char* pinned_strName = strName)
			{
				unsafe_strName = (ushort*)pinned_strName;
				// Call to native method
				global::McgInterop.esqlite3_PInvokes.sqlite3_result_error16(
									context, 
									unsafe_strName, 
									nLen
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, sqlite3_result_text16, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_result_text16")]
		public static void sqlite3_result_text16(
					global::System.IntPtr context, 
					string strName, 
					int nLen, 
					global::System.IntPtr pvReserved)
		{
			// Setup
			ushort* unsafe_strName = default(ushort*);
			// Marshalling
			fixed (char* pinned_strName = strName)
			{
				unsafe_strName = (ushort*)pinned_strName;
				// Call to native method
				global::McgInterop.esqlite3_PInvokes.sqlite3_result_text16(
									context, 
									unsafe_strName, 
									nLen, 
									pvReserved
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, sqlite3_config_none, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_config_none")]
		public static int sqlite3_config_none(int op)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_config_none(op);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_config_int, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_config_int")]
		public static int sqlite3_config_int(
					int op, 
					int val)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_config_int(
								op, 
								val
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_config_log, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_esqlite3_NativeMethods_callback_log__SQLitePCLPlugin_esqlite3__SQLitePCL__SQLite3Provider_esqlite3_NativeMethods_callback_log__SQLitePCLPlugin_esqlite3, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_config_log")]
		public static int sqlite3_config_log(
					int op, 
					global::SQLitePCL.SQLite3Provider_esqlite3_NativeMethods_callback_log__SQLitePCLPlugin_esqlite3 func, 
					global::System.IntPtr pvUser)
		{
			// Setup
			void* unsafe_func = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_func = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_esqlite3+NativeMethods+callback_log,SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture" +
											"=neutral, PublicKeyToken=null"), 
									func
								);
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_config_log(
									op, 
									unsafe_func, 
									pvUser
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(func);
			}
		}

		// Signature, sqlite3_create_function_v2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_esqlite3_NativeMethods_callback_scalar_function__SQLitePCLPlugin_esqlite3__SQLitePCL__SQLite3Provider_esqlite3_NativeMethods_callback_scalar_function__SQLitePCLPlugin_esqlite3, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_esqlite3_NativeMethods_callback_agg_function_step__SQLitePCLPlugin_esqlite3__SQLitePCL__SQLite3Provider_esqlite3_NativeMethods_callback_agg_function_step__SQLitePCLPlugin_esqlite3, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_esqlite3_NativeMethods_callback_agg_function_final__SQLitePCLPlugin_esqlite3__SQLitePCL__SQLite3Provider_esqlite3_NativeMethods_callback_agg_function_final__SQLitePCLPlugin_esqlite3, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_esqlite3_NativeMethods_callback_destroy__SQLitePCLPlugin_esqlite3__SQLitePCL__SQLite3Provider_esqlite3_NativeMethods_callback_destroy__SQLitePCLPlugin_esqlite3, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_create_function_v2")]
		public static int sqlite3_create_function_v2(
					global::System.IntPtr db, 
					byte[] strName, 
					int nArgs, 
					int nType, 
					global::System.IntPtr pvUser, 
					global::SQLitePCL.SQLite3Provider_esqlite3_NativeMethods_callback_scalar_function__SQLitePCLPlugin_esqlite3 func, 
					global::SQLitePCL.SQLite3Provider_esqlite3_NativeMethods_callback_agg_function_step__SQLitePCLPlugin_esqlite3 fstep, 
					global::SQLitePCL.SQLite3Provider_esqlite3_NativeMethods_callback_agg_function_final__SQLitePCLPlugin_esqlite3 ffinal, 
					global::SQLitePCL.SQLite3Provider_esqlite3_NativeMethods_callback_destroy__SQLitePCLPlugin_esqlite3 fdestroy)
		{
			// Setup
			byte* unsafe_strName;
			void* unsafe_func = default(void*);
			void* unsafe_fstep = default(void*);
			void* unsafe_ffinal = default(void*);
			void* unsafe_fdestroy = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_strName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(strName))
				{
					unsafe_strName = (byte*)pinned_strName;
					unsafe_func = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_esqlite3+NativeMethods+callback_scalar_function,SQLitePCLPlugin_esqlite3, Version=0.0." +
												"0.0, Culture=neutral, PublicKeyToken=null"), 
										func
									);
					unsafe_fstep = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_esqlite3+NativeMethods+callback_agg_function_step,SQLitePCLPlugin_esqlite3, Version=0." +
												"0.0.0, Culture=neutral, PublicKeyToken=null"), 
										fstep
									);
					unsafe_ffinal = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_esqlite3+NativeMethods+callback_agg_function_final,SQLitePCLPlugin_esqlite3, Version=0" +
												".0.0.0, Culture=neutral, PublicKeyToken=null"), 
										ffinal
									);
					unsafe_fdestroy = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_esqlite3+NativeMethods+callback_destroy,SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Cul" +
												"ture=neutral, PublicKeyToken=null"), 
										fdestroy
									);
					// Call to native method
					unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_create_function_v2(
										db, 
										unsafe_strName, 
										nArgs, 
										nType, 
										pvUser, 
										unsafe_func, 
										unsafe_fstep, 
										unsafe_ffinal, 
										unsafe_fdestroy
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(func);
				global::System.GC.KeepAlive(fstep);
				global::System.GC.KeepAlive(ffinal);
				global::System.GC.KeepAlive(fdestroy);
			}
		}

		// Signature, sqlite3_create_collation, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_esqlite3_NativeMethods_callback_collation__SQLitePCLPlugin_esqlite3__SQLitePCL__SQLite3Provider_esqlite3_NativeMethods_callback_collation__SQLitePCLPlugin_esqlite3, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_create_collation")]
		public static int sqlite3_create_collation(
					global::System.IntPtr db, 
					byte[] strName, 
					int nType, 
					global::System.IntPtr pvUser, 
					global::SQLitePCL.SQLite3Provider_esqlite3_NativeMethods_callback_collation__SQLitePCLPlugin_esqlite3 func)
		{
			// Setup
			byte* unsafe_strName;
			void* unsafe_func = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_strName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(strName))
				{
					unsafe_strName = (byte*)pinned_strName;
					unsafe_func = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_esqlite3+NativeMethods+callback_collation,SQLitePCLPlugin_esqlite3, Version=0.0.0.0, C" +
												"ulture=neutral, PublicKeyToken=null"), 
										func
									);
					// Call to native method
					unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_create_collation(
										db, 
										unsafe_strName, 
										nType, 
										pvUser, 
										unsafe_func
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(func);
			}
		}

		// Signature, sqlite3_update_hook, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_esqlite3_NativeMethods_callback_update__SQLitePCLPlugin_esqlite3__SQLitePCL__SQLite3Provider_esqlite3_NativeMethods_callback_update__SQLitePCLPlugin_esqlite3, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_update_hook")]
		public static global::System.IntPtr sqlite3_update_hook(
					global::System.IntPtr db, 
					global::SQLitePCL.SQLite3Provider_esqlite3_NativeMethods_callback_update__SQLitePCLPlugin_esqlite3 func, 
					global::System.IntPtr pvUser)
		{
			// Setup
			void* unsafe_func = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_func = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_esqlite3+NativeMethods+callback_update,SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Cult" +
											"ure=neutral, PublicKeyToken=null"), 
									func
								);
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_update_hook(
									db, 
									unsafe_func, 
									pvUser
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(func);
			}
		}

		// Signature, sqlite3_commit_hook, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_esqlite3_NativeMethods_callback_commit__SQLitePCLPlugin_esqlite3__SQLitePCL__SQLite3Provider_esqlite3_NativeMethods_callback_commit__SQLitePCLPlugin_esqlite3, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_commit_hook")]
		public static global::System.IntPtr sqlite3_commit_hook(
					global::System.IntPtr db, 
					global::SQLitePCL.SQLite3Provider_esqlite3_NativeMethods_callback_commit__SQLitePCLPlugin_esqlite3 func, 
					global::System.IntPtr pvUser)
		{
			// Setup
			void* unsafe_func = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_func = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_esqlite3+NativeMethods+callback_commit,SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Cult" +
											"ure=neutral, PublicKeyToken=null"), 
									func
								);
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_commit_hook(
									db, 
									unsafe_func, 
									pvUser
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(func);
			}
		}

		// Signature, sqlite3_profile, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_esqlite3_NativeMethods_callback_profile__SQLitePCLPlugin_esqlite3__SQLitePCL__SQLite3Provider_esqlite3_NativeMethods_callback_profile__SQLitePCLPlugin_esqlite3, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_profile")]
		public static global::System.IntPtr sqlite3_profile(
					global::System.IntPtr db, 
					global::SQLitePCL.SQLite3Provider_esqlite3_NativeMethods_callback_profile__SQLitePCLPlugin_esqlite3 func, 
					global::System.IntPtr pvUser)
		{
			// Setup
			void* unsafe_func = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_func = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_esqlite3+NativeMethods+callback_profile,SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Cul" +
											"ture=neutral, PublicKeyToken=null"), 
									func
								);
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_profile(
									db, 
									unsafe_func, 
									pvUser
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(func);
			}
		}

		// Signature, sqlite3_progress_handler, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_esqlite3_NativeMethods_callback_progress_handler__SQLitePCLPlugin_esqlite3__SQLitePCL__SQLite3Provider_esqlite3_NativeMethods_callback_progress_handler__SQLitePCLPlugin_esqlite3, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_progress_handler")]
		public static global::System.IntPtr sqlite3_progress_handler(
					global::System.IntPtr db, 
					int instructions, 
					global::SQLitePCL.SQLite3Provider_esqlite3_NativeMethods_callback_progress_handler__SQLitePCLPlugin_esqlite3 func, 
					global::System.IntPtr pvUser)
		{
			// Setup
			void* unsafe_func = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_func = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_esqlite3+NativeMethods+callback_progress_handler,SQLitePCLPlugin_esqlite3, Version=0.0" +
											".0.0, Culture=neutral, PublicKeyToken=null"), 
									func
								);
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_progress_handler(
									db, 
									instructions, 
									unsafe_func, 
									pvUser
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(func);
			}
		}

		// Signature, sqlite3_trace, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_esqlite3_NativeMethods_callback_trace__SQLitePCLPlugin_esqlite3__SQLitePCL__SQLite3Provider_esqlite3_NativeMethods_callback_trace__SQLitePCLPlugin_esqlite3, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_trace")]
		public static global::System.IntPtr sqlite3_trace(
					global::System.IntPtr db, 
					global::SQLitePCL.SQLite3Provider_esqlite3_NativeMethods_callback_trace__SQLitePCLPlugin_esqlite3 func, 
					global::System.IntPtr pvUser)
		{
			// Setup
			void* unsafe_func = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_func = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_esqlite3+NativeMethods+callback_trace,SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Cultu" +
											"re=neutral, PublicKeyToken=null"), 
									func
								);
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_trace(
									db, 
									unsafe_func, 
									pvUser
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(func);
			}
		}

		// Signature, sqlite3_rollback_hook, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_esqlite3_NativeMethods_callback_rollback__SQLitePCLPlugin_esqlite3__SQLitePCL__SQLite3Provider_esqlite3_NativeMethods_callback_rollback__SQLitePCLPlugin_esqlite3, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_rollback_hook")]
		public static global::System.IntPtr sqlite3_rollback_hook(
					global::System.IntPtr db, 
					global::SQLitePCL.SQLite3Provider_esqlite3_NativeMethods_callback_rollback__SQLitePCLPlugin_esqlite3 func, 
					global::System.IntPtr pvUser)
		{
			// Setup
			void* unsafe_func = default(void*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_func = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_esqlite3+NativeMethods+callback_rollback,SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Cu" +
											"lture=neutral, PublicKeyToken=null"), 
									func
								);
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_rollback_hook(
									db, 
									unsafe_func, 
									pvUser
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(func);
			}
		}

		// Signature, sqlite3_db_handle, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_db_handle")]
		public static global::System.IntPtr sqlite3_db_handle(global::System.IntPtr stmt)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_db_handle(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_next_stmt, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_next_stmt")]
		public static global::System.IntPtr sqlite3_next_stmt(
					global::System.IntPtr db, 
					global::System.IntPtr stmt)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_next_stmt(
								db, 
								stmt
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_stmt_busy, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_stmt_busy")]
		public static int sqlite3_stmt_busy(global::System.IntPtr stmt)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_stmt_busy(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_stmt_readonly, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_stmt_readonly")]
		public static int sqlite3_stmt_readonly(global::System.IntPtr stmt)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_stmt_readonly(stmt);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_exec, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_esqlite3_NativeMethods_callback_exec__SQLitePCLPlugin_esqlite3__SQLitePCL__SQLite3Provider_esqlite3_NativeMethods_callback_exec__SQLitePCLPlugin_esqlite3, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_exec")]
		public static int sqlite3_exec(
					global::System.IntPtr db, 
					byte[] strSql, 
					global::SQLitePCL.SQLite3Provider_esqlite3_NativeMethods_callback_exec__SQLitePCLPlugin_esqlite3 cb, 
					global::System.IntPtr pvParam, 
					out global::System.IntPtr errMsg)
		{
			// Setup
			byte* unsafe_strSql;
			void* unsafe_cb = default(void*);
			global::System.IntPtr unsafe_errMsg;
			int unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_strSql = global::McgInterop.McgCoreHelpers.GetArrayForCompat(strSql))
				{
					unsafe_strSql = (byte*)pinned_strSql;
					unsafe_cb = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
										global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_esqlite3+NativeMethods+callback_exec,SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Cultur" +
												"e=neutral, PublicKeyToken=null"), 
										cb
									);
					// Call to native method
					unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_exec(
										db, 
										unsafe_strSql, 
										unsafe_cb, 
										pvParam, 
										&(unsafe_errMsg)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					errMsg = unsafe_errMsg;
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(cb);
			}
		}

		// Signature, sqlite3_get_autocommit, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_get_autocommit")]
		public static int sqlite3_get_autocommit(global::System.IntPtr db)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_get_autocommit(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_extended_result_codes, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_extended_result_codes")]
		public static int sqlite3_extended_result_codes(
					global::System.IntPtr db, 
					int onoff)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_extended_result_codes(
								db, 
								onoff
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_errcode, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_errcode")]
		public static int sqlite3_errcode(global::System.IntPtr db)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_errcode(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_extended_errcode, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_extended_errcode")]
		public static int sqlite3_extended_errcode(global::System.IntPtr db)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_extended_errcode(db);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_errstr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_errstr")]
		public static global::System.IntPtr sqlite3_errstr(int rc)
		{
			// Setup
			global::System.IntPtr unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_errstr(rc);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_log, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_log")]
		public static void sqlite3_log(
					int iErrCode, 
					byte[] zFormat)
		{
			// Setup
			byte* unsafe_zFormat;
			// Marshalling
			fixed (byte* pinned_zFormat = global::McgInterop.McgCoreHelpers.GetArrayForCompat(zFormat))
			{
				unsafe_zFormat = (byte*)pinned_zFormat;
				// Call to native method
				global::McgInterop.esqlite3_PInvokes.sqlite3_log(
									iErrCode, 
									unsafe_zFormat
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
		}

		// Signature, sqlite3_file_control, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_file_control")]
		public static int sqlite3_file_control(
					global::System.IntPtr db, 
					byte[] zDbName, 
					int op, 
					global::System.IntPtr pArg)
		{
			// Setup
			byte* unsafe_zDbName;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_zDbName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(zDbName))
			{
				unsafe_zDbName = (byte*)pinned_zDbName;
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_file_control(
									db, 
									unsafe_zDbName, 
									op, 
									pArg
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_backup_init, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_backup_init")]
		public static global::System.IntPtr sqlite3_backup_init(
					global::System.IntPtr destDb, 
					byte[] zDestName, 
					global::System.IntPtr sourceDb, 
					byte[] zSourceName)
		{
			// Setup
			byte* unsafe_zDestName;
			byte* unsafe_zSourceName;
			global::System.IntPtr unsafe___value;
			// Marshalling
			fixed (byte* pinned_zDestName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(zDestName))
			{
				unsafe_zDestName = (byte*)pinned_zDestName;
				fixed (byte* pinned_zSourceName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(zSourceName))
				{
					unsafe_zSourceName = (byte*)pinned_zSourceName;
					// Call to native method
					unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_backup_init(
										destDb, 
										unsafe_zDestName, 
										sourceDb, 
										unsafe_zSourceName
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_backup_step, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_backup_step")]
		public static int sqlite3_backup_step(
					global::System.IntPtr backup, 
					int nPage)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_backup_step(
								backup, 
								nPage
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_backup_finish, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_backup_finish")]
		public static int sqlite3_backup_finish(global::System.IntPtr backup)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_backup_finish(backup);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_backup_remaining, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_backup_remaining")]
		public static int sqlite3_backup_remaining(global::System.IntPtr backup)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_backup_remaining(backup);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_backup_pagecount, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_backup_pagecount")]
		public static int sqlite3_backup_pagecount(global::System.IntPtr backup)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_backup_pagecount(backup);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_blob_open, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] long____int64, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_blob_open")]
		public static int sqlite3_blob_open(
					global::System.IntPtr db, 
					byte[] sdb, 
					byte[] table, 
					byte[] col, 
					long rowid, 
					int flags, 
					out global::System.IntPtr blob)
		{
			// Setup
			byte* unsafe_sdb;
			byte* unsafe_table;
			byte* unsafe_col;
			global::System.IntPtr unsafe_blob;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_sdb = global::McgInterop.McgCoreHelpers.GetArrayForCompat(sdb))
			{
				unsafe_sdb = (byte*)pinned_sdb;
				fixed (byte* pinned_table = global::McgInterop.McgCoreHelpers.GetArrayForCompat(table))
				{
					unsafe_table = (byte*)pinned_table;
					fixed (byte* pinned_col = global::McgInterop.McgCoreHelpers.GetArrayForCompat(col))
					{
						unsafe_col = (byte*)pinned_col;
						// Call to native method
						unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_blob_open(
											db, 
											unsafe_sdb, 
											unsafe_table, 
											unsafe_col, 
											rowid, 
											flags, 
											&(unsafe_blob)
										);
						global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
						blob = unsafe_blob;
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_blob_write, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_blob_write")]
		public static int sqlite3_blob_write(
					global::System.IntPtr blob, 
					byte[] b, 
					int n, 
					int offset)
		{
			// Setup
			byte* unsafe_b;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_b = global::McgInterop.McgCoreHelpers.GetArrayForCompat(b))
			{
				unsafe_b = (byte*)pinned_b;
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_blob_write(
									blob, 
									unsafe_b, 
									n, 
									offset
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_blob_read, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_blob_read")]
		public static int sqlite3_blob_read(
					global::System.IntPtr blob, 
					byte[] b, 
					int n, 
					int offset)
		{
			// Setup
			byte* unsafe_b;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_b = global::McgInterop.McgCoreHelpers.GetArrayForCompat(b))
			{
				unsafe_b = (byte*)pinned_b;
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_blob_read(
									blob, 
									unsafe_b, 
									n, 
									offset
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, other_sqlite3_blob_write, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "other_sqlite3_blob_write")]
		public static int other_sqlite3_blob_write(
					global::System.IntPtr blob, 
					global::System.IntPtr b, 
					int n, 
					int offset)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.other_sqlite3_blob_write(
								blob, 
								b, 
								n, 
								offset
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, other_sqlite3_blob_read, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "other_sqlite3_blob_read")]
		public static int other_sqlite3_blob_read(
					global::System.IntPtr blob, 
					global::System.IntPtr b, 
					int n, 
					int offset)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.other_sqlite3_blob_read(
								blob, 
								b, 
								n, 
								offset
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_blob_bytes, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_blob_bytes")]
		public static int sqlite3_blob_bytes(global::System.IntPtr blob)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_blob_bytes(blob);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_blob_close, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_blob_close")]
		public static int sqlite3_blob_close(global::System.IntPtr blob)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_blob_close(blob);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_wal_autocheckpoint, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_wal_autocheckpoint")]
		public static int sqlite3_wal_autocheckpoint(
					global::System.IntPtr db, 
					int n)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_wal_autocheckpoint(
								db, 
								n
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_wal_checkpoint, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_wal_checkpoint")]
		public static int sqlite3_wal_checkpoint(
					global::System.IntPtr db, 
					byte[] dbName)
		{
			// Setup
			byte* unsafe_dbName;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_dbName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dbName))
			{
				unsafe_dbName = (byte*)pinned_dbName;
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_wal_checkpoint(
									db, 
									unsafe_dbName
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_wal_checkpoint_v2, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_wal_checkpoint_v2")]
		public static int sqlite3_wal_checkpoint_v2(
					global::System.IntPtr db, 
					byte[] dbName, 
					int eMode, 
					out int logSize, 
					out int framesCheckPointed)
		{
			// Setup
			byte* unsafe_dbName;
			int unsafe_logSize;
			int unsafe_framesCheckPointed;
			int unsafe___value;
			// Marshalling
			fixed (byte* pinned_dbName = global::McgInterop.McgCoreHelpers.GetArrayForCompat(dbName))
			{
				unsafe_dbName = (byte*)pinned_dbName;
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_wal_checkpoint_v2(
									db, 
									unsafe_dbName, 
									eMode, 
									&(unsafe_logSize), 
									&(unsafe_framesCheckPointed)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				framesCheckPointed = unsafe_framesCheckPointed;
				logSize = unsafe_logSize;
			}
			// Return
			return unsafe___value;
		}

		// Signature, sqlite3_set_authorizer, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] SQLitePCL_SQLite3Provider_esqlite3_NativeMethods_callback_authorizer__SQLitePCLPlugin_esqlite3__SQLitePCL__SQLite3Provider_esqlite3_NativeMethods_callback_authorizer__SQLitePCLPlugin_esqlite3, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_set_authorizer")]
		public static int sqlite3_set_authorizer(
					global::System.IntPtr db, 
					global::SQLitePCL.SQLite3Provider_esqlite3_NativeMethods_callback_authorizer__SQLitePCLPlugin_esqlite3 cb, 
					global::System.IntPtr pvUser)
		{
			// Setup
			void* unsafe_cb = default(void*);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_cb = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("SQLitePCL.SQLite3Provider_esqlite3+NativeMethods+callback_authorizer,SQLitePCLPlugin_esqlite3, Version=0.0.0.0, " +
											"Culture=neutral, PublicKeyToken=null"), 
									cb
								);
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_set_authorizer(
									db, 
									unsafe_cb, 
									pvUser
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(cb);
			}
		}

		// Signature, sqlite3_win32_set_directory, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("SQLitePCLPlugin_esqlite3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "SQLitePCL.SQLite3Provider_esqlite3+NativeMethods", "sqlite3_win32_set_directory")]
		public static int sqlite3_win32_set_directory(
					uint directoryType, 
					string directoryPath)
		{
			// Setup
			ushort* unsafe_directoryPath = default(ushort*);
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_directoryPath = directoryPath)
			{
				unsafe_directoryPath = (ushort*)pinned_directoryPath;
				// Call to native method
				unsafe___value = global::McgInterop.esqlite3_PInvokes.sqlite3_win32_set_directory(
									directoryType, 
									unsafe_directoryPath
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			}
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module '[MRT]'
	/// </summary>
	public unsafe static partial class _MRT_
	{
		// Signature, RhWaitForPendingFinalizers, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhWaitForPendingFinalizers")]
		public static void RhWaitForPendingFinalizers(int allowReentrantWait)
		{
			// Marshalling
			// Call to native method
			global::McgInterop._MRT__PInvokes.RhWaitForPendingFinalizers(allowReentrantWait);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, RhCompatibleReentrantWaitAny, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr___ptr__w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhCompatibleReentrantWaitAny")]
		public static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop._MRT__PInvokes.RhCompatibleReentrantWaitAny(
								alertable, 
								timeout, 
								count, 
								((global::System.IntPtr*)handles)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, _ecvt_s, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int___ptrint *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int___ptrint *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "_ecvt_s")]
		public static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign)
		{
			// Marshalling
			// Call to native method
			global::McgInterop._MRT__PInvokes._ecvt_s(
								((byte*)buffer), 
								sizeInBytes, 
								value, 
								count, 
								((int*)dec), 
								((int*)sign)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, memmove, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "memmove")]
		public static void memmove(
					byte* dmem, 
					byte* smem, 
					ulong size)
		{
			// Marshalling
			// Call to native method
			global::McgInterop._MRT__PInvokes.memmove(
								((byte*)dmem), 
								((byte*)smem), 
								size
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module '*'
	/// </summary>
	public unsafe static partial class _
	{
		// Signature, CallingConventionConverter_GetStubs, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.TypeLoader, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.Runtime.TypeLoader.CallConverterThunk", "CallingConventionConverter_GetStubs")]
		public static void CallingConventionConverter_GetStubs(
					out global::System.IntPtr returnVoidStub, 
					out global::System.IntPtr returnIntegerStub, 
					out global::System.IntPtr commonStub)
		{
			// Setup
			global::System.IntPtr unsafe_returnVoidStub;
			global::System.IntPtr unsafe_returnIntegerStub;
			global::System.IntPtr unsafe_commonStub;
			// Marshalling
			// Call to native method
			global::McgInterop.__PInvokes.CallingConventionConverter_GetStubs(
								&(unsafe_returnVoidStub), 
								&(unsafe_returnIntegerStub), 
								&(unsafe_commonStub)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			commonStub = unsafe_commonStub;
			returnIntegerStub = unsafe_returnIntegerStub;
			returnVoidStub = unsafe_returnVoidStub;
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-errorhandling-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll
	{
		// Signature, GetLastError, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Runtime.Extensions, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetLastError")]
		public static int GetLastError()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes.GetLastError();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll
	{
		// Signature, RoInitialize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "RoInitialize")]
		public static int RoInitialize(uint initType)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_winrt_l1_1_0_dll_PInvokes.RoInitialize(initType);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-localization-l1-2-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll
	{
		// Signature, IsValidLocaleName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] char___ptrwchar_t *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "IsValidLocaleName")]
		public static int IsValidLocaleName(char* lpLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.IsValidLocaleName(((ushort*)lpLocaleName));
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResolveLocaleName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] char___ptrwchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] char___ptrwchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "ResolveLocaleName")]
		public static int ResolveLocaleName(
					char* lpNameToResolve, 
					char* lpLocaleName, 
					int cchLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.ResolveLocaleName(
								((ushort*)lpNameToResolve), 
								((ushort*)lpLocaleName), 
								cchLocaleName
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, GetCPInfoExW, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages___ptr__Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Text.Encoding.CodePages, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetCPInfoExW")]
		public static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.GetCPInfoExW(
								CodePage, 
								dwFlags, 
								((global::Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages*)lpCPInfoEx)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-com-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll
	{
		// Signature, CoCreateInstance, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.StackTraceGenerator.StackTraceGenerator", "CoCreateInstance")]
		public static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					out global::System.IntPtr ppv)
		{
			// Setup
			global::System.IntPtr unsafe_ppv;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_com_l1_1_0_dll_PInvokes.CoCreateInstance(
								((byte*)rclsid), 
								pUnkOuter, 
								dwClsContext, 
								((byte*)riid), 
								&(unsafe_ppv)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ppv = unsafe_ppv;
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'OleAut32'
	/// </summary>
	public unsafe static partial class OleAut32
	{
		// Signature, SysFreeString, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.LightweightInterop.MarshalExtensions", "SysFreeString")]
		public static void SysFreeString(global::System.IntPtr bstr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OleAut32_PInvokes.SysFreeString(bstr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-robuffer-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll
	{
		// Signature, RoGetBufferMarshaler, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.ComInterfaceMarshaller] System_Runtime_InteropServices_IMarshal__System_Runtime_WindowsRuntime__System_Runtime_InteropServices__IMarshal__System_Runtime_WindowsRuntime *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Runtime.WindowsRuntime, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "Interop+mincore_PInvokes", "RoGetBufferMarshaler")]
		public static int RoGetBufferMarshaler(out global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime bufferMarshalerPtr)
		{
			// Setup
			global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime__Impl.Vtbl** unsafe_bufferMarshalerPtr = default(global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime__Impl.Vtbl**);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_bufferMarshalerPtr = null;
				// Call to native method
				unsafe___value = global::McgInterop.api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes.RoGetBufferMarshaler(&(unsafe_bufferMarshalerPtr));
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				bufferMarshalerPtr = (global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime)global::System.Runtime.InteropServices.McgModuleManager.ComInterfaceToObject(
									((global::System.IntPtr)unsafe_bufferMarshalerPtr), 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("System.Runtime.InteropServices.IMarshal,System.Runtime.WindowsRuntime, Version=4.0.10.0, Culture=neutral, Public" +
											"KeyToken=b77a5c561934e089")
								);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_bufferMarshalerPtr)));
			}
		}
	}

	public unsafe static partial class kernel32_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-sysinfo-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void GetNativeSystemInfo(global::AdDuplex.Common.Core._SYSTEM_INFO__AdDuplex* lpSystemInfo);
	}

	public unsafe static partial class sqlite3_dll_PInvokes
	{
		public static int sqlite3_win32_set_directory(
					uint directoryType, 
					ushort* directoryPath)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_win32_set_directory!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_open(
					global::System.IntPtr filename, 
					global::System.IntPtr* db)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_open!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_open_v2(
					global::System.IntPtr filename, 
					global::System.IntPtr* db, 
					int flags, 
					global::System.IntPtr zVfs)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_open_v2!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_close_v2(global::System.IntPtr db)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_close_v2!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_prepare_v2(
					global::System.IntPtr db, 
					global::System.IntPtr zSql, 
					int nByte, 
					global::System.IntPtr* ppStmpt, 
					global::System.IntPtr pzTail)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_prepare_v2!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_create_function(
					global::System.IntPtr db, 
					global::System.IntPtr functionName, 
					int nArg, 
					int p, 
					global::System.IntPtr intPtr1, 
					global::System.IntPtr func, 
					global::System.IntPtr intPtr2, 
					global::System.IntPtr intPtr3)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_create_function!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_create_collation(
					global::System.IntPtr db, 
					global::System.IntPtr collationName, 
					int textRep, 
					global::System.IntPtr app, 
					global::System.IntPtr compare)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_create_collation!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static long sqlite3_last_insert_rowid(global::System.IntPtr db)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_last_insert_rowid!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_errmsg(global::System.IntPtr db)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_errmsg!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_bind_int(
					global::System.IntPtr stmHandle, 
					int iParam, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_int!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_bind_int64(
					global::System.IntPtr stmHandle, 
					int iParam, 
					long value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_int64!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_bind_text(
					global::System.IntPtr stmHandle, 
					int iParam, 
					global::System.IntPtr value, 
					int length, 
					global::System.IntPtr destructor)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_text!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_bind_double(
					global::System.IntPtr stmHandle, 
					int iParam, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_double!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_bind_blob(
					global::System.IntPtr stmHandle, 
					int iParam, 
					byte* value, 
					int length, 
					global::System.IntPtr destructor)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_blob!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_bind_null(
					global::System.IntPtr stmHandle, 
					int iParam)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_null!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_bind_parameter_count(global::System.IntPtr stmHandle)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_parameter_count!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_bind_parameter_name(
					global::System.IntPtr stmHandle, 
					int iParam)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_parameter_name!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_bind_parameter_index(
					global::System.IntPtr stmHandle, 
					global::System.IntPtr paramName)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_parameter_index!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_step(global::System.IntPtr stmHandle)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_step!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_column_int(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_int!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static long sqlite3_column_int64(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_int64!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_column_text(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_text!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double sqlite3_column_double(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_double!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_column_blob(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_blob!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_column_type(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_type!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_column_bytes(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_bytes!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_column_count(global::System.IntPtr stmHandle)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_count!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_column_name(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_name!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_column_origin_name(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_origin_name!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_column_table_name(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_table_name!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_column_database_name(
					global::System.IntPtr stmHandle, 
					int iCol)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_database_name!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_data_count(global::System.IntPtr stmHandle)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_data_count!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_reset(global::System.IntPtr stmHandle)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_reset!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_clear_bindings(global::System.IntPtr stmHandle)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_clear_bindings!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_finalize(global::System.IntPtr stmHandle)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_finalize!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_value_int(global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_value_int!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static long sqlite3_value_int64(global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_value_int64!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_value_text(global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_value_text!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double sqlite3_value_double(global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_value_double!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_value_blob(global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_value_blob!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_value_type(global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_value_type!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_value_bytes(global::System.IntPtr value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_value_bytes!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_int(
					global::System.IntPtr context, 
					int value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_int!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_int64(
					global::System.IntPtr context, 
					long value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_int64!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_text(
					global::System.IntPtr context, 
					global::System.IntPtr value, 
					int length, 
					global::System.IntPtr destructor)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_text!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_double(
					global::System.IntPtr context, 
					double value)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_double!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_blob(
					global::System.IntPtr context, 
					byte* value, 
					int length, 
					global::System.IntPtr destructor)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_blob!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_null(global::System.IntPtr context)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_null!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_error(
					global::System.IntPtr context, 
					global::System.IntPtr value, 
					int length)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_error!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_aggregate_context(
					global::System.IntPtr context, 
					int length)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_aggregate_context!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_changes(global::System.IntPtr db)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_changes!sqlite3.dll' in assembly 'SQLitePCL.Ext, Version=3.8.7.2, Culture=neutral, PublicKeyToken=bddade01e9c850c5' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}
	}

	public unsafe static partial class sqlite3_PInvokes
	{
		public static int sqlite3_close(global::System.IntPtr db)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_close!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_close_v2(global::System.IntPtr db)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_close_v2!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_enable_shared_cache(int enable)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_enable_shared_cache!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_interrupt(global::System.IntPtr db)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_interrupt!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_finalize(global::System.IntPtr stmt)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_finalize!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_reset(global::System.IntPtr stmt)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_reset!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_clear_bindings(global::System.IntPtr stmt)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_clear_bindings!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_stmt_status(
					global::System.IntPtr stm, 
					int op, 
					int resetFlg)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_stmt_status!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_bind_parameter_name(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_parameter_name!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_column_database_name(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_database_name!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_column_database_name16(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_database_name16!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_column_decltype(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_decltype!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_column_decltype16(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_decltype16!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_column_name(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_name!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_column_name16(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_name16!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_column_origin_name(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_origin_name!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_column_origin_name16(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_origin_name16!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_column_table_name(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_table_name!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_column_table_name16(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_table_name16!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_column_text(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_text!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_column_text16(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_text16!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_errmsg(global::System.IntPtr db)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_errmsg!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_db_readonly(
					global::System.IntPtr db, 
					byte* dbName)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_db_readonly!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_db_filename(
					global::System.IntPtr db, 
					byte* att)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_db_filename!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_prepare(
					global::System.IntPtr db, 
					global::System.IntPtr pSql, 
					int nBytes, 
					global::System.IntPtr* stmt, 
					global::System.IntPtr* ptrRemain)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_prepare!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_prepare_v2(
					global::System.IntPtr db, 
					byte* pSql, 
					int nBytes, 
					global::System.IntPtr* stmt, 
					global::System.IntPtr* ptrRemain)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_prepare_v2!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_db_status(
					global::System.IntPtr db, 
					int op, 
					int* current, 
					int* highest, 
					int resetFlg)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_db_status!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_complete(byte* pSql)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_complete!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_compileoption_used(byte* pSql)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_compileoption_used!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_compileoption_get(int n)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_compileoption_get!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_table_column_metadata(
					global::System.IntPtr db, 
					byte* dbName, 
					byte* tblName, 
					byte* colName, 
					global::System.IntPtr* ptrDataType, 
					global::System.IntPtr* ptrCollSeq, 
					int* notNull, 
					int* primaryKey, 
					int* autoInc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_table_column_metadata!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_value_text(global::System.IntPtr p)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_value_text!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_value_text16(global::System.IntPtr p)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_value_text16!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_enable_load_extension(
					global::System.IntPtr db, 
					int enable)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_enable_load_extension!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_load_extension(
					global::System.IntPtr db, 
					byte* fileName, 
					byte* procName, 
					global::System.IntPtr* pError)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_load_extension!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_libversion()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_libversion!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_libversion_number()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_libversion_number!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_sourceid()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_sourceid!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_malloc(int n)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_malloc!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_realloc(
					global::System.IntPtr p, 
					int n)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_realloc!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_free(global::System.IntPtr p)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_free!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_open(
					byte* filename, 
					global::System.IntPtr* db)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_open!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_open_v2(
					byte* filename, 
					global::System.IntPtr* db, 
					int flags, 
					byte* vfs)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_open_v2!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_vfs_find(byte* vfs)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_vfs_find!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_open16(
					ushort* fileName, 
					global::System.IntPtr* db)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_open16!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static long sqlite3_last_insert_rowid(global::System.IntPtr db)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_last_insert_rowid!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_changes(global::System.IntPtr db)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_changes!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_total_changes(global::System.IntPtr db)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_total_changes!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static long sqlite3_memory_used()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_memory_used!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static long sqlite3_memory_highwater(int resetFlag)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_memory_highwater!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_status(
					int op, 
					int* current, 
					int* highwater, 
					int resetFlag)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_status!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_shutdown()
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_shutdown!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_busy_timeout(
					global::System.IntPtr db, 
					int ms)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_busy_timeout!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_bind_blob(
					global::System.IntPtr stmt, 
					int index, 
					byte* val, 
					int nSize, 
					global::System.IntPtr nTransient)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_blob!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_bind_zeroblob(
					global::System.IntPtr stmt, 
					int index, 
					int size)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_zeroblob!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_bind_double(
					global::System.IntPtr stmt, 
					int index, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_double!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_bind_int(
					global::System.IntPtr stmt, 
					int index, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_int!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_bind_int64(
					global::System.IntPtr stmt, 
					int index, 
					long val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_int64!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_bind_null(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_null!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_bind_text(
					global::System.IntPtr stmt, 
					int index, 
					byte* val, 
					int nlen, 
					global::System.IntPtr pvReserved)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_text!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_bind_parameter_count(global::System.IntPtr stmt)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_parameter_count!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_bind_parameter_index(
					global::System.IntPtr stmt, 
					byte* strName)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_parameter_index!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_column_count(global::System.IntPtr stmt)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_count!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_data_count(global::System.IntPtr stmt)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_data_count!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_step(global::System.IntPtr stmt)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_step!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_sql(global::System.IntPtr stmt)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_sql!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double sqlite3_column_double(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_double!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_column_int(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_int!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static long sqlite3_column_int64(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_int64!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_column_blob(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_blob!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_column_bytes(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_bytes!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_column_type(
					global::System.IntPtr stmt, 
					int index)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_column_type!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_aggregate_count(global::System.IntPtr context)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_aggregate_count!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_value_blob(global::System.IntPtr p)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_value_blob!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_value_bytes(global::System.IntPtr p)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_value_bytes!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static double sqlite3_value_double(global::System.IntPtr p)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_value_double!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_value_int(global::System.IntPtr p)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_value_int!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static long sqlite3_value_int64(global::System.IntPtr p)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_value_int64!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_value_type(global::System.IntPtr p)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_value_type!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_user_data(global::System.IntPtr context)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_user_data!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_blob(
					global::System.IntPtr context, 
					byte* val, 
					int nSize, 
					global::System.IntPtr pvReserved)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_blob!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_double(
					global::System.IntPtr context, 
					double val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_double!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_error(
					global::System.IntPtr context, 
					byte* strErr, 
					int nLen)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_error!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_int(
					global::System.IntPtr context, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_int!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_int64(
					global::System.IntPtr context, 
					long val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_int64!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_null(global::System.IntPtr context)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_null!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_text(
					global::System.IntPtr context, 
					byte* val, 
					int nLen, 
					global::System.IntPtr pvReserved)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_text!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_zeroblob(
					global::System.IntPtr context, 
					int n)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_zeroblob!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_error_toobig(global::System.IntPtr context)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_error_toobig!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_error_nomem(global::System.IntPtr context)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_error_nomem!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_error_code(
					global::System.IntPtr context, 
					int code)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_error_code!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_aggregate_context(
					global::System.IntPtr context, 
					int nBytes)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_aggregate_context!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_bind_text16(
					global::System.IntPtr stmt, 
					int index, 
					ushort* val, 
					int nlen, 
					global::System.IntPtr pvReserved)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_bind_text16!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_error16(
					global::System.IntPtr context, 
					ushort* strName, 
					int nLen)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_error16!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_result_text16(
					global::System.IntPtr context, 
					ushort* strName, 
					int nLen, 
					global::System.IntPtr pvReserved)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_result_text16!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_config_none(int op)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_config_none!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_config_int(
					int op, 
					int val)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_config_int!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_config_log(
					int op, 
					void* func, 
					global::System.IntPtr pvUser)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_config_log!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_create_function_v2(
					global::System.IntPtr db, 
					byte* strName, 
					int nArgs, 
					int nType, 
					global::System.IntPtr pvUser, 
					void* func, 
					void* fstep, 
					void* ffinal, 
					void* fdestroy)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_create_function_v2!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_create_collation(
					global::System.IntPtr db, 
					byte* strName, 
					int nType, 
					global::System.IntPtr pvUser, 
					void* func)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_create_collation!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_update_hook(
					global::System.IntPtr db, 
					void* func, 
					global::System.IntPtr pvUser)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_update_hook!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_commit_hook(
					global::System.IntPtr db, 
					void* func, 
					global::System.IntPtr pvUser)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_commit_hook!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_profile(
					global::System.IntPtr db, 
					void* func, 
					global::System.IntPtr pvUser)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_profile!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_progress_handler(
					global::System.IntPtr db, 
					int instructions, 
					void* func, 
					global::System.IntPtr pvUser)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_progress_handler!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_trace(
					global::System.IntPtr db, 
					void* func, 
					global::System.IntPtr pvUser)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_trace!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_rollback_hook(
					global::System.IntPtr db, 
					void* func, 
					global::System.IntPtr pvUser)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_rollback_hook!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_db_handle(global::System.IntPtr stmt)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_db_handle!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_next_stmt(
					global::System.IntPtr db, 
					global::System.IntPtr stmt)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_next_stmt!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_stmt_busy(global::System.IntPtr stmt)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_stmt_busy!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_stmt_readonly(global::System.IntPtr stmt)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_stmt_readonly!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_exec(
					global::System.IntPtr db, 
					byte* strSql, 
					void* cb, 
					global::System.IntPtr pvParam, 
					global::System.IntPtr* errMsg)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_exec!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_get_autocommit(global::System.IntPtr db)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_get_autocommit!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_extended_result_codes(
					global::System.IntPtr db, 
					int onoff)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_extended_result_codes!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_errcode(global::System.IntPtr db)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_errcode!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_extended_errcode(global::System.IntPtr db)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_extended_errcode!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_errstr(int rc)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_errstr!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static void sqlite3_log(
					int iErrCode, 
					byte* zFormat)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_log!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_file_control(
					global::System.IntPtr db, 
					byte* zDbName, 
					int op, 
					global::System.IntPtr pArg)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_file_control!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static global::System.IntPtr sqlite3_backup_init(
					global::System.IntPtr destDb, 
					byte* zDestName, 
					global::System.IntPtr sourceDb, 
					byte* zSourceName)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_backup_init!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_backup_step(
					global::System.IntPtr backup, 
					int nPage)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_backup_step!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_backup_finish(global::System.IntPtr backup)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_backup_finish!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_backup_remaining(global::System.IntPtr backup)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_backup_remaining!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_backup_pagecount(global::System.IntPtr backup)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_backup_pagecount!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_blob_open(
					global::System.IntPtr db, 
					byte* sdb, 
					byte* table, 
					byte* col, 
					long rowid, 
					int flags, 
					global::System.IntPtr* blob)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_blob_open!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_blob_write(
					global::System.IntPtr blob, 
					byte* b, 
					int n, 
					int offset)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_blob_write!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_blob_read(
					global::System.IntPtr blob, 
					byte* b, 
					int n, 
					int offset)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_blob_read!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int other_sqlite3_blob_write(
					global::System.IntPtr blob, 
					global::System.IntPtr b, 
					int n, 
					int offset)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'other_sqlite3_blob_write!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int other_sqlite3_blob_read(
					global::System.IntPtr blob, 
					global::System.IntPtr b, 
					int n, 
					int offset)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'other_sqlite3_blob_read!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_blob_bytes(global::System.IntPtr blob)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_blob_bytes!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_blob_close(global::System.IntPtr blob)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_blob_close!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_wal_autocheckpoint(
					global::System.IntPtr db, 
					int n)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_wal_autocheckpoint!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_wal_checkpoint(
					global::System.IntPtr db, 
					byte* dbName)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_wal_checkpoint!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_wal_checkpoint_v2(
					global::System.IntPtr db, 
					byte* dbName, 
					int eMode, 
					int* logSize, 
					int* framesCheckPointed)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_wal_checkpoint_v2!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_set_authorizer(
					global::System.IntPtr db, 
					void* cb, 
					global::System.IntPtr pvUser)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_set_authorizer!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}

		public static int sqlite3_win32_set_directory(
					uint directoryType, 
					ushort* directoryPath)
		{
			throw new global::System.TypeLoadException(@"Unresolved P/Invoke method 'sqlite3_win32_set_directory!sqlite3' in assembly 'SQLitePCL.raw, Version=0.9.0.0, Culture=neutral, PublicKeyToken=null' because it is not available in UWP applications. Please either use an another API , or use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP application APIs.");
		}
	}

	public unsafe static partial class esqlite3_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_close(global::System.IntPtr db);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_close_v2(global::System.IntPtr db);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_enable_shared_cache(int enable);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sqlite3_interrupt(global::System.IntPtr db);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_finalize(global::System.IntPtr stmt);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_reset(global::System.IntPtr stmt);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_clear_bindings(global::System.IntPtr stmt);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_stmt_status(
					global::System.IntPtr stm, 
					int op, 
					int resetFlg);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_bind_parameter_name(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_column_database_name(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_column_database_name16(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_column_decltype(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_column_decltype16(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_column_name(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_column_name16(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_column_origin_name(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_column_origin_name16(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_column_table_name(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_column_table_name16(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_column_text(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_column_text16(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_errmsg(global::System.IntPtr db);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_db_readonly(
					global::System.IntPtr db, 
					byte* dbName);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_db_filename(
					global::System.IntPtr db, 
					byte* att);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_prepare(
					global::System.IntPtr db, 
					global::System.IntPtr pSql, 
					int nBytes, 
					global::System.IntPtr* stmt, 
					global::System.IntPtr* ptrRemain);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_prepare_v2(
					global::System.IntPtr db, 
					byte* pSql, 
					int nBytes, 
					global::System.IntPtr* stmt, 
					global::System.IntPtr* ptrRemain);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_db_status(
					global::System.IntPtr db, 
					int op, 
					int* current, 
					int* highest, 
					int resetFlg);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_complete(byte* pSql);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_compileoption_used(byte* pSql);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_compileoption_get(int n);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_table_column_metadata(
					global::System.IntPtr db, 
					byte* dbName, 
					byte* tblName, 
					byte* colName, 
					global::System.IntPtr* ptrDataType, 
					global::System.IntPtr* ptrCollSeq, 
					int* notNull, 
					int* primaryKey, 
					int* autoInc);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_value_text(global::System.IntPtr p);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_value_text16(global::System.IntPtr p);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_enable_load_extension(
					global::System.IntPtr db, 
					int enable);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_load_extension(
					global::System.IntPtr db, 
					byte* fileName, 
					byte* procName, 
					global::System.IntPtr* pError);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_libversion();

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_libversion_number();

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_sourceid();

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_malloc(int n);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_realloc(
					global::System.IntPtr p, 
					int n);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sqlite3_free(global::System.IntPtr p);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_open(
					byte* filename, 
					global::System.IntPtr* db);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_open_v2(
					byte* filename, 
					global::System.IntPtr* db, 
					int flags, 
					byte* vfs);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_vfs_find(byte* vfs);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_open16(
					ushort* fileName, 
					global::System.IntPtr* db);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static long sqlite3_last_insert_rowid(global::System.IntPtr db);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_changes(global::System.IntPtr db);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_total_changes(global::System.IntPtr db);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static long sqlite3_memory_used();

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static long sqlite3_memory_highwater(int resetFlag);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_status(
					int op, 
					int* current, 
					int* highwater, 
					int resetFlag);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_shutdown();

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_busy_timeout(
					global::System.IntPtr db, 
					int ms);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_bind_blob(
					global::System.IntPtr stmt, 
					int index, 
					byte* val, 
					int nSize, 
					global::System.IntPtr nTransient);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_bind_zeroblob(
					global::System.IntPtr stmt, 
					int index, 
					int size);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_bind_double(
					global::System.IntPtr stmt, 
					int index, 
					double val);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_bind_int(
					global::System.IntPtr stmt, 
					int index, 
					int val);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_bind_int64(
					global::System.IntPtr stmt, 
					int index, 
					long val);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_bind_null(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_bind_text(
					global::System.IntPtr stmt, 
					int index, 
					byte* val, 
					int nlen, 
					global::System.IntPtr pvReserved);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_bind_parameter_count(global::System.IntPtr stmt);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_bind_parameter_index(
					global::System.IntPtr stmt, 
					byte* strName);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_column_count(global::System.IntPtr stmt);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_data_count(global::System.IntPtr stmt);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_step(global::System.IntPtr stmt);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_sql(global::System.IntPtr stmt);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static double sqlite3_column_double(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_column_int(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static long sqlite3_column_int64(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_column_blob(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_column_bytes(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_column_type(
					global::System.IntPtr stmt, 
					int index);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_aggregate_count(global::System.IntPtr context);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_value_blob(global::System.IntPtr p);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_value_bytes(global::System.IntPtr p);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static double sqlite3_value_double(global::System.IntPtr p);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_value_int(global::System.IntPtr p);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static long sqlite3_value_int64(global::System.IntPtr p);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_value_type(global::System.IntPtr p);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_user_data(global::System.IntPtr context);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sqlite3_result_blob(
					global::System.IntPtr context, 
					byte* val, 
					int nSize, 
					global::System.IntPtr pvReserved);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sqlite3_result_double(
					global::System.IntPtr context, 
					double val);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sqlite3_result_error(
					global::System.IntPtr context, 
					byte* strErr, 
					int nLen);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sqlite3_result_int(
					global::System.IntPtr context, 
					int val);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sqlite3_result_int64(
					global::System.IntPtr context, 
					long val);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sqlite3_result_null(global::System.IntPtr context);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sqlite3_result_text(
					global::System.IntPtr context, 
					byte* val, 
					int nLen, 
					global::System.IntPtr pvReserved);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sqlite3_result_zeroblob(
					global::System.IntPtr context, 
					int n);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sqlite3_result_error_toobig(global::System.IntPtr context);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sqlite3_result_error_nomem(global::System.IntPtr context);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sqlite3_result_error_code(
					global::System.IntPtr context, 
					int code);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_aggregate_context(
					global::System.IntPtr context, 
					int nBytes);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_bind_text16(
					global::System.IntPtr stmt, 
					int index, 
					ushort* val, 
					int nlen, 
					global::System.IntPtr pvReserved);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sqlite3_result_error16(
					global::System.IntPtr context, 
					ushort* strName, 
					int nLen);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sqlite3_result_text16(
					global::System.IntPtr context, 
					ushort* strName, 
					int nLen, 
					global::System.IntPtr pvReserved);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", EntryPoint="sqlite3_config", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_config_none(int op);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", EntryPoint="sqlite3_config", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_config_int(
					int op, 
					int val);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", EntryPoint="sqlite3_config", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_config_log(
					int op, 
					void* func, 
					global::System.IntPtr pvUser);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_create_function_v2(
					global::System.IntPtr db, 
					byte* strName, 
					int nArgs, 
					int nType, 
					global::System.IntPtr pvUser, 
					void* func, 
					void* fstep, 
					void* ffinal, 
					void* fdestroy);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_create_collation(
					global::System.IntPtr db, 
					byte* strName, 
					int nType, 
					global::System.IntPtr pvUser, 
					void* func);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_update_hook(
					global::System.IntPtr db, 
					void* func, 
					global::System.IntPtr pvUser);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_commit_hook(
					global::System.IntPtr db, 
					void* func, 
					global::System.IntPtr pvUser);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_profile(
					global::System.IntPtr db, 
					void* func, 
					global::System.IntPtr pvUser);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_progress_handler(
					global::System.IntPtr db, 
					int instructions, 
					void* func, 
					global::System.IntPtr pvUser);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_trace(
					global::System.IntPtr db, 
					void* func, 
					global::System.IntPtr pvUser);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_rollback_hook(
					global::System.IntPtr db, 
					void* func, 
					global::System.IntPtr pvUser);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_db_handle(global::System.IntPtr stmt);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_next_stmt(
					global::System.IntPtr db, 
					global::System.IntPtr stmt);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_stmt_busy(global::System.IntPtr stmt);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_stmt_readonly(global::System.IntPtr stmt);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_exec(
					global::System.IntPtr db, 
					byte* strSql, 
					void* cb, 
					global::System.IntPtr pvParam, 
					global::System.IntPtr* errMsg);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_get_autocommit(global::System.IntPtr db);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_extended_result_codes(
					global::System.IntPtr db, 
					int onoff);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_errcode(global::System.IntPtr db);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_extended_errcode(global::System.IntPtr db);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_errstr(int rc);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static void sqlite3_log(
					int iErrCode, 
					byte* zFormat);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_file_control(
					global::System.IntPtr db, 
					byte* zDbName, 
					int op, 
					global::System.IntPtr pArg);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static global::System.IntPtr sqlite3_backup_init(
					global::System.IntPtr destDb, 
					byte* zDestName, 
					global::System.IntPtr sourceDb, 
					byte* zSourceName);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_backup_step(
					global::System.IntPtr backup, 
					int nPage);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_backup_finish(global::System.IntPtr backup);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_backup_remaining(global::System.IntPtr backup);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_backup_pagecount(global::System.IntPtr backup);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_blob_open(
					global::System.IntPtr db, 
					byte* sdb, 
					byte* table, 
					byte* col, 
					long rowid, 
					int flags, 
					global::System.IntPtr* blob);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_blob_write(
					global::System.IntPtr blob, 
					byte* b, 
					int n, 
					int offset);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_blob_read(
					global::System.IntPtr blob, 
					byte* b, 
					int n, 
					int offset);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", EntryPoint="sqlite3_blob_write", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int other_sqlite3_blob_write(
					global::System.IntPtr blob, 
					global::System.IntPtr b, 
					int n, 
					int offset);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", EntryPoint="sqlite3_blob_read", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int other_sqlite3_blob_read(
					global::System.IntPtr blob, 
					global::System.IntPtr b, 
					int n, 
					int offset);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_blob_bytes(global::System.IntPtr blob);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_blob_close(global::System.IntPtr blob);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_wal_autocheckpoint(
					global::System.IntPtr db, 
					int n);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_wal_checkpoint(
					global::System.IntPtr db, 
					byte* dbName);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_wal_checkpoint_v2(
					global::System.IntPtr db, 
					byte* dbName, 
					int eMode, 
					int* logSize, 
					int* framesCheckPointed);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_set_authorizer(
					global::System.IntPtr db, 
					void* cb, 
					global::System.IntPtr pvUser);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("esqlite3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
		public extern static int sqlite3_win32_set_directory(
					uint directoryType, 
					ushort* directoryPath);
	}

	public unsafe static partial class _MRT__PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void RhWaitForPendingFinalizers(int allowReentrantWait);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void memmove(
					byte* dmem, 
					byte* smem, 
					ulong size);
	}

	public unsafe static partial class __PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("*", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CallingConventionConverter_GetStubs(
					global::System.IntPtr* returnVoidStub, 
					global::System.IntPtr* returnIntegerStub, 
					global::System.IntPtr* commonStub);
	}

	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-errorhandling-l1-1-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetLastError();
	}

	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RoInitialize(uint initType);
	}

	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int IsValidLocaleName(ushort* lpLocaleName);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ResolveLocaleName(
					ushort* lpNameToResolve, 
					ushort* lpLocaleName, 
					int cchLocaleName);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx);
	}

	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-com-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					global::System.IntPtr* ppv);
	}

	public unsafe static partial class OleAut32_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("oleaut32.dll", EntryPoint="#6", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void SysFreeString(global::System.IntPtr bstr);
	}

	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-robuffer-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int RoGetBufferMarshaler(global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime__Impl.Vtbl*** bufferMarshalerPtr);
	}
}

